% Judgements

kd-wf : kind -> type.
kd-equiv : kind -> kind -> type.
kd-sub : kind -> kind -> type.
cn-of : con -> kind -> type.
cn-equiv : con -> con -> kind -> type.

tm-assm : term -> con -> type.
tm-of : sttp -> term -> con -> type.

st-lookup : sttp -> location -> entp -> type.
store-of : sttp -> store -> sttp -> type.

md-of : purity -> sttp -> module' -> sg -> type.

% Kind Formation

kd-wf/t : kd-wf t.

kd-wf/sing : cn-of C T -> kd-wf (sing C).

kd-wf/pi : (cn-of a K1 -> kd-wf (K2 a)) -> kd-wf K1 -> kd-wf (pi K1 K2).

kd-wf/sigma : (cn-of a K1 -> kd-wf (K2 a)) -> kd-wf K1 -> kd-wf (sigma K1 K2).

kd-wf/one : kd-wf one.

% Kind Equivalence

kd-equiv/refl : kd-wf K -> kd-equiv K K.

kd-equiv/symm : kd-equiv K1 K2 -> kd-equiv K2 K1.

kd-equiv/trans : kd-equiv K1 K2 -> kd-equiv K2 K3 -> kd-equiv K1 K3.

kd-equiv/sing : cn-equiv C1 C2 t -> kd-equiv (sing C1) (sing C2).

kd-equiv/pi : (cn-of a K1 -> kd-equiv (K2 a) (K2' a)) ->
                kd-equiv K1 K1' ->
                kd-equiv (pi K1 K2) (pi K1' K2').

kd-equiv/sigma : (cn-of a K1 -> kd-equiv (K2 a) (K2' a)) ->
                   kd-equiv K1 K1' ->
                   kd-equiv (sigma K1 K2) (sigma K1' K2').

% Subkind

kd-sub/refl : kd-equiv K1 K2 -> kd-sub K1 K2.

kd-sub/trans : kd-sub K1 K2 -> kd-sub K2 K3 -> kd-sub K1 K3.

kd-sub/sing-t : cn-of C t -> kd-sub (sing C) t.

kd-sub/pi : (cn-of a K1 -> kd-wf (K2 a)) ->
              (cn-of b K1' -> kd-sub (K2 b) (K2' b)) ->
              kd-sub K1' K1 ->
              kd-sub (pi K1 K2) (pi K1' K2').

kd-sub/sigma : (cn-of a K1' -> kd-wf (K2' a)) ->
                 (cn-of b K1 -> kd-sub (K2 b) (K2' b)) ->
                 kd-sub K1' K1 ->
                 kd-sub (sigma K1 K2) (sigma K1' K2').

% Constructor Formation

cn-of/pair : (cn-of a K1 -> kd-wf (K2 a)) ->
               cn-of C2 (K2 C1) ->
               cn-of C1 K1 ->
               cn-of (pair C1 C2) (sigma K1 K2).

cn-of/pi1 : cn-of C (sigma K1 K2) -> cn-of (pi1 C) K1.

cn-of/pi2 : cn-of C (sigma K1 K2) -> cn-of (pi2 C) (K2 (pi1 C)).

cn-of/lam : (cn-of a K1 -> cn-of (C a) (K2 a)) ->
              kd-wf K1 ->
              cn-of (lam K1 C) (pi K1 K2).

cn-of/app : cn-of C2 K1 -> cn-of C1 (pi K1 K2) -> cn-of (app C1 C2) (K2 C2).

cn-of/star : cn-of star one.

cn-of/unit : cn-of unit t.

cn-of/void : cn-of void t.

cn-of/prod : cn-of C1 t -> cn-of C2 t -> cn-of (prod C1 C2) t.

cn-of/arrow : cn-of C1 t -> cn-of C2 t -> cn-of (arrow C1 C2) t.

cn-of/plus : cn-of C1 t -> cn-of C2 t -> cn-of (arrow C1 C2) t.

cn-of/ref : cn-of C t -> cn-of (ref C) t.

cn-of/tag : cn-of C t -> cn-of (tag C) t.

cn-of/tagged : cn-of tagged t.

cn-of/rec : cn-of C2 K ->
              (cn-of a (pi K (\l. t)) -> cn-of b K -> cn-of (C1 a b) t) ->
              kd-wf K ->
              cn-of (rec' K C1 C2) t.

cn-of/labeled : cn-of C t -> cn-of (labeled I C) t.

cn-of/sing : cn-of C t -> cn-of C (sing C).

cn-of/extpi : (cn-of a K1 -> cn-of (app C a) (K2 a)) ->
                cn-of C (pi K1 K2) ->
                cn-of C (pi K1 K2).

cn-of/extsigma : (cn-of a K1 -> kd-wf (K2 a)) ->
                   cn-of (pi2 C) (K2 (pi1 C)) ->
                   cn-of (pi1 C) K1 ->
                   cn-of C (sigma K1 K2).

cn-of/subsume : kd-sub K K' -> cn-of C K -> cn-of C K'.

% Constructor Equivalence

cn-equiv/refl : cn-of C K -> cn-equiv C C K.

cn-equiv/symm : cn-equiv C1 C2 K -> cn-equiv C2 C1 K.

cn-equiv/trans : cn-equiv C1 C2 K -> cn-equiv C2 C3 K -> cn-equiv C1 C3 K.

cn-equiv/pair : (cn-of a K1 -> kd-wf (K2 a)) ->
                  cn-equiv C2 C2' (K2 C1) ->
                  cn-equiv C1 C1' K1 ->
                  cn-equiv (pair C1 C2) (pair C1' C2') (sigma K1 K2).

cn-equiv/pi1 : cn-equiv C C' (sigma K1 K2) -> cn-equiv (pi1 C) (pi1 C') K1.

cn-equiv/pi2 : cn-equiv C C' (sigma K1 K2) ->
                 cn-equiv (pi2 C) (pi2 C') (K2 (pi1 C)).

cn-equiv/lam : (cn-of a K1 -> cn-equiv (C a) (C' a) (K2 a)) ->
                 kd-equiv K1 K1' ->
                 cn-equiv (lam K1 C) (lam K1' C') (pi K1 K2).

cn-equiv/app : cn-equiv C2 C2' K1 ->
                 cn-equiv C1 C1' (pi K1 K2) ->
                 cn-equiv (app C1 C2) (app C1' C2') (K2 C2).

cn-equiv/prod : cn-equiv C1 C1' t ->
                  cn-equiv C2 C2' t ->
                  cn-equiv (prod C1 C2) (prod C1' C2') t.

cn-equiv/arrow : cn-equiv C1 C1' t ->
                   cn-equiv C2 C2' t ->
                   cn-equiv (arrow C1 C2) (arrow C1' C2') t.

cn-equiv/plus : cn-equiv C1 C1' t ->
                  cn-equiv C2 C2' t ->
                  cn-equiv (plus C1 C2) (plus C1' C2') t.

cn-equiv/ref : cn-equiv C C' t -> cn-equiv (ref C) (ref C') t.

cn-equiv/tag : cn-equiv C C' t -> cn-equiv (tag C) (tag C') t.

cn-equiv/rec : cn-equiv C2 C2' K ->
                 (cn-of a (pi K (\l. t)) ->
                   cn-of b K ->
                   cn-equiv (C1 a b) (C1' a b ) t) ->
                 kd-equiv K K' ->
                 cn-equiv (rec' K C1 C2) (rec' K' C1' C2') t.

cn-equiv/labeled : cn-equiv C C' t -> cn-equiv (labeled I C) (labeled I C') t.

cn-equiv/sing : cn-equiv C C' t -> cn-equiv C C' (sing C).

cn-equiv/singelim : cn-of C (sing C') -> cn-equiv C C' t.

cn-equiv/extpi : (cn-of a K1 -> cn-equiv (app C a) (app C' a) (K2 a)) ->
                   cn-of C' (pi K1 K2'') ->
                   cn-of C (pi K1 K2') ->
                   cn-equiv C C' (pi K1 K2).

cn-equiv/extpiw : (cn-of a K1 -> cn-equiv (app C a) (app C' a) (K2 a)) ->
                    cn-equiv C C' (pi K1 K2') ->
                    cn-equiv C C' (pi K1 K2).

cn-equiv/extsigma : (cn-of a K1 -> kd-wf (K2 a)) ->
                      cn-equiv (pi2 C) (pi2 C') (K2 (pi1 C)) ->
                      cn-equiv (pi1 C) (pi1 C') K1 ->
                      cn-equiv C C' (sigma K1 K2).

cn-equiv/one : cn-of C one -> cn-of C' one -> cn-equiv C C' one.

cn-equiv/subsume : kd-sub K K' -> cn-equiv C C' K -> cn-equiv C C' K'.

%{ FIXME: Unbound identifier K2
cn-equiv/beta : cn-of C1 K1 ->
                  (cn-of a K1 -> cn-of (C2 a) (K2 a)) ->
                  cn-equiv (app (lam K1 C2) C1) (C2 C1) (K2 C1).
}%

cn-equiv/beta1 : cn-of C1 K1 ->
                   cn-of C2 K2 ->
                   cn-equiv (pi1 (pair C1 C2)) C1 K1.

cn-equiv/beta2 : cn-of C1 K1 ->
                   cn-of C2 K2 ->
                   cn-equiv (pi2 (pair C1 C2)) C2 K2.

% Term Formation

tm-of/var : tm-assm X T -> tm-of F X T.

tm-of/unit : tm-of F tm/unit unit.

tm-of/abort : cn-of T t -> tm-of F E void -> tm-of F (tm/abort E T) T.

tm-of/pair : tm-of F E1 T1 ->
               tm-of F E2 T2 ->
               tm-of F (tm/pair E1 E2) (prod T1 T2).

tm-of/pi1 : tm-of F E (prod T1 T2) -> tm-of F (tm/pi1 E) T1.

tm-of/pi2 : tm-of F E (prod T1 T2) -> tm-of F (tm/pi2 E) T2.

tm-of/lam : (tm-assm x T1 -> tm-of F (E x) T2) ->
              cn-of T1 t ->
              tm-of F (tm/lam T1 (\x. E x)) (arrow T1 T2).

tm-of/app : tm-of F E2 T1 ->
              tm-of F E1 (arrow T1 T2) ->
              tm-of F (tm/app E1 E2) T2.

tm-of/in1 : cn-of T2 t ->
              tm-of F E T1 ->
              tm-of F (tm/in1 E T2) (plus T1 T2).

tm-of/in2 : cn-of T1 t ->
              tm-of F E T2 ->
              tm-of F (tm/in2 E T1) (plus T1 T2).

tm-of/case : (tm-assm x T1 -> tm-of F (E1 x) T) ->
               (tm-assm y T2 -> tm-of F (E2 y) T) ->
               tm-of F E (plus T1 T2) ->
               tm-of F (tm/case E E1 E2) T.

tm-of/refloc : cn-of T t ->
                 st-lookup F L (et/ref T) ->
                 tm-of F (tm/refloc L) (ref T).

tm-of/ref : tm-of F E T -> tm-of F (tm/ref E) (ref T).

tm-of/deref : tm-of F E (ref T) -> tm-of F (tm/deref E) T.

tm-of/assign : tm-of F E2 T ->
                 tm-of F E1 (ref T) ->
                 tm-of F (tm/assign E1 E2) unit.

tm-of/tagloc : cn-of T t ->
                 st-lookup F L (et/tag T) ->
                 tm-of F (tm/tagloc L) (tag T).

tm-of/newtag : cn-of T t -> tm-of F (tm/newtag T) (tag T).

tm-of/tag : tm-of F E2 T -> tm-of F E1 (tag T) -> tm-of F (tm/tag E1 E2) tagged.

tm-of/iftag : tm-of F E4 T ->
                (tm-assm x T' -> tm-of F (E3 x) T) ->
                tm-of F E2 (tag T') ->
                tm-of F E1 tagged ->
                tm-of F (tm/iftag E1 E2 E3 E4) T.

tm-of/unroll : tm-of F E (rec' K C1 C2) ->
                 tm-of F (tm/unroll E) (C1 (lam K (\a. rec' K C1 a)) C2).

tm-of/in : tm-of F E T -> tm-of F (tm/in I E) (labeled I T).

tm-of/out : tm-of F E (labeled I T) -> tm-of F (tm/out E) T.

tm-of/raise : cn-of T t -> tm-of F E tagged -> tm-of F (tm/raise E T) T.

tm-of/try : (tm-assm x tagged -> tm-of F (E2 x) T) ->
              tm-of F E1 T ->
              tm-of F (tm/try E1 (\x. E2 x)) T.

tm-of/lett : (tm-assm x T1 -> tm-of F (E2 x) T2) ->
               tm-of F E1 T1 ->
               tm-of F (tm/lett E1 (\x. E2 x)) T2.

tm-of/snd : md-of P F M (sg/datom T) -> tm-of F (tm/snd M) T.

tm-of/equiv : cn-equiv T1 T2 t -> tm-of F E T1 -> tm-of F E T2.
