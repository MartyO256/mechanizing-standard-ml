% Judgements

tm-assm : term -> con -> type.
md-assm : module' -> sg -> type.

% Kind Formation

LF kd-wf : kind -> type =
| kd-wf/t : kd-wf t
| kd-wf/sing : cn-of C T -> kd-wf (sing C)
| kd-wf/pi : ({ a : con } cn-of a K1 -> kd-wf (K2 a)) ->
               kd-wf K1 ->
               kd-wf (pi K1 K2)
| kd-wf/sigma : ({ a : con } cn-of a K1 -> kd-wf (K2 a)) ->
                  kd-wf K1 ->
                  kd-wf (sigma K1 K2)
| kd-wf/one : kd-wf one

% Kind Equivalence

and kd-equiv : kind -> kind -> type =
| kd-equiv/refl : kd-wf K -> kd-equiv K K

| kd-equiv/symm : kd-equiv K1 K2 -> kd-equiv K2 K1

| kd-equiv/trans : kd-equiv K1 K2 -> kd-equiv K2 K3 -> kd-equiv K1 K3

| kd-equiv/sing : cn-equiv C1 C2 t -> kd-equiv (sing C1) (sing C2)

| kd-equiv/pi : ({ a : con } cn-of a K1 -> kd-equiv (K2 a) (K2' a)) ->
                  kd-equiv K1 K1' ->
                  kd-equiv (pi K1 K2) (pi K1' K2')

| kd-equiv/sigma : ({ a : con } cn-of a K1 -> kd-equiv (K2 a) (K2' a)) ->
                     kd-equiv K1 K1' ->
                     kd-equiv (sigma K1 K2) (sigma K1' K2')

% Subkind

and kd-sub : kind -> kind -> type =
| kd-sub/refl : kd-equiv K1 K2 -> kd-sub K1 K2

| kd-sub/trans : kd-sub K1 K2 -> kd-sub K2 K3 -> kd-sub K1 K3

| kd-sub/sing-t : cn-of C t -> kd-sub (sing C) t

| kd-sub/pi : ({ a : con } cn-of a K1 -> kd-wf (K2 a)) ->
                (cn-of b K1' -> kd-sub (K2 b) (K2' b)) ->
                kd-sub K1' K1 ->
                kd-sub (pi K1 K2) (pi K1' K2')

| kd-sub/sigma : ({ a : con } cn-of a K1' -> kd-wf (K2' a)) ->
                   (cn-of b K1 -> kd-sub (K2 b) (K2' b)) ->
                   kd-sub K1' K1 ->
                   kd-sub (sigma K1 K2) (sigma K1' K2')

% Constructor Formation

and cn-of : con -> kind -> type =
| cn-of/pair : ({ a : con } cn-of a K1 -> kd-wf (K2 a)) ->
                 cn-of C2 (K2 C1) ->
                 cn-of C1 K1 ->
                 cn-of (pair C1 C2) (sigma K1 K2)

| cn-of/pi1 : cn-of C (sigma K1 K2) -> cn-of (pi1 C) K1

| cn-of/pi2 : cn-of C (sigma K1 K2) -> cn-of (pi2 C) (K2 (pi1 C))

| cn-of/lam : ({ a : con } cn-of a K1 -> cn-of (C a) (K2 a)) ->
                kd-wf K1 ->
                cn-of (lam K1 C) (pi K1 K2)

| cn-of/app : cn-of C2 K1 -> cn-of C1 (pi K1 K2) -> cn-of (app C1 C2) (K2 C2)

| cn-of/star : cn-of star one

| cn-of/unit : cn-of unit t

| cn-of/void : cn-of void t

| cn-of/prod : cn-of C1 t -> cn-of C2 t -> cn-of (prod C1 C2) t

| cn-of/arrow : cn-of C1 t -> cn-of C2 t -> cn-of (arrow C1 C2) t

| cn-of/plus : cn-of C1 t -> cn-of C2 t -> cn-of (plus C1 C2) t

| cn-of/ref : cn-of C t -> cn-of (ref C) t

| cn-of/tag : cn-of C t -> cn-of (tag C) t

| cn-of/tagged : cn-of tagged t

| cn-of/rec : cn-of C2 K ->
                ({ a : con } cn-of a (pi K (\l. t)) ->
                  cn-of b K -> cn-of (C1 a b) t) ->
                kd-wf K ->
                cn-of (rec' K C1 C2) t

| cn-of/labeled : cn-of C t -> cn-of (labeled I C) t

| cn-of/sing : cn-of C t -> cn-of C (sing C)

| cn-of/extpi : ({ a : con } cn-of a K1 -> cn-of (app C a) (K2 a)) ->
                  cn-of C (pi K1 K2) ->
                  cn-of C (pi K1 K2)

| cn-of/extsigma : ({ a : con } cn-of a K1 -> kd-wf (K2 a)) ->
                     cn-of (pi2 C) (K2 (pi1 C)) ->
                     cn-of (pi1 C) K1 ->
                     cn-of C (sigma K1 K2)

| cn-of/subsume : kd-sub K K' -> cn-of C K -> cn-of C K'

% Constructor Equivalence

and cn-equiv : con -> con -> kind -> type =
| cn-equiv/refl : cn-of C K -> cn-equiv C C K

| cn-equiv/symm : cn-equiv C1 C2 K -> cn-equiv C2 C1 K

| cn-equiv/trans : cn-equiv C1 C2 K -> cn-equiv C2 C3 K -> cn-equiv C1 C3 K

| cn-equiv/pair : ({ a : con } cn-of a K1 -> kd-wf (K2 a)) ->
                    cn-equiv C2 C2' (K2 C1) ->
                    cn-equiv C1 C1' K1 ->
                    cn-equiv (pair C1 C2) (pair C1' C2') (sigma K1 K2)

| cn-equiv/pi1 : cn-equiv C C' (sigma K1 K2) -> cn-equiv (pi1 C) (pi1 C') K1

| cn-equiv/pi2 : cn-equiv C C' (sigma K1 K2) ->
                   cn-equiv (pi2 C) (pi2 C') (K2 (pi1 C))

| cn-equiv/lam : ({ a : con } cn-of a K1 -> cn-equiv (C a) (C' a) (K2 a)) ->
                   kd-equiv K1 K1' ->
                   cn-equiv (lam K1 C) (lam K1' C') (pi K1 K2)

| cn-equiv/app : cn-equiv C2 C2' K1 ->
                   cn-equiv C1 C1' (pi K1 K2) ->
                   cn-equiv (app C1 C2) (app C1' C2') (K2 C2)

| cn-equiv/prod : cn-equiv C1 C1' t ->
                    cn-equiv C2 C2' t ->
                    cn-equiv (prod C1 C2) (prod C1' C2') t

| cn-equiv/arrow : cn-equiv C1 C1' t ->
                     cn-equiv C2 C2' t ->
                     cn-equiv (arrow C1 C2) (arrow C1' C2') t

| cn-equiv/plus : cn-equiv C1 C1' t ->
                    cn-equiv C2 C2' t ->
                    cn-equiv (plus C1 C2) (plus C1' C2') t

| cn-equiv/ref : cn-equiv C C' t -> cn-equiv (ref C) (ref C') t

| cn-equiv/tag : cn-equiv C C' t -> cn-equiv (tag C) (tag C') t

| cn-equiv/rec : cn-equiv C2 C2' K ->
                   ({ a : con } cn-of a (pi K (\l. t)) ->
                     cn-of b K ->
                     cn-equiv (C1 a b) (C1' a b ) t) ->
                   kd-equiv K K' ->
                   cn-equiv (rec' K C1 C2) (rec' K' C1' C2') t

| cn-equiv/labeled : cn-equiv C C' t -> cn-equiv (labeled I C) (labeled I C') t

| cn-equiv/sing : cn-equiv C C' t -> cn-equiv C C' (sing C)

| cn-equiv/singelim : cn-of C (sing C') -> cn-equiv C C' t

| cn-equiv/extpi : ({ a : con } cn-of a K1 ->
                       cn-equiv (app C a) (app C' a) (K2 a)) ->
                     cn-of C' (pi K1 K2'') ->
                     cn-of C (pi K1 K2') ->
                     cn-equiv C C' (pi K1 K2)

| cn-equiv/extpiw : ({ a : con } cn-of a K1 ->
                        cn-equiv (app C a) (app C' a) (K2 a)) ->
                      cn-equiv C C' (pi K1 K2') ->
                      cn-equiv C C' (pi K1 K2)

| cn-equiv/extsigma : ({ a : con } cn-of a K1 -> kd-wf (K2 a)) ->
                        cn-equiv (pi2 C) (pi2 C') (K2 (pi1 C)) ->
                        cn-equiv (pi1 C) (pi1 C') K1 ->
                        cn-equiv C C' (sigma K1 K2)

| cn-equiv/one : cn-of C one -> cn-of C' one -> cn-equiv C C' one

| cn-equiv/subsume : kd-sub K K' -> cn-equiv C C' K -> cn-equiv C C' K'

| cn-equiv/beta : cn-of C1 K1 ->
                    ({ a : con } cn-of a K1 -> cn-of (C2 a) (K2 a)) ->
                    cn-equiv (app (lam K1 C2) C1) (C2 C1) (K2 C1)

| cn-equiv/beta1 : cn-of C1 K1 ->
                   cn-of C2 K2 ->
                   cn-equiv (pi1 (pair C1 C2)) C1 K1

| cn-equiv/beta2 : cn-of C1 K1 ->
                   cn-of C2 K2 ->
                   cn-equiv (pi2 (pair C1 C2)) C2 K2
;

% Term Formation

LF tm-of : sttp -> term -> con -> type =
| tm-of/var : tm-assm X T -> tm-of F X T

| tm-of/unit : tm-of F tm/unit unit

| tm-of/abort : cn-of T t -> tm-of F E void -> tm-of F (tm/abort E T) T

| tm-of/pair : tm-of F E1 T1 ->
                 tm-of F E2 T2 ->
                 tm-of F (tm/pair E1 E2) (prod T1 T2)

| tm-of/pi1 : tm-of F E (prod T1 T2) -> tm-of F (tm/pi1 E) T1

| tm-of/pi2 : tm-of F E (prod T1 T2) -> tm-of F (tm/pi2 E) T2

| tm-of/lam : ({ x : term } tm-assm x T1 -> tm-of F (E x) T2) ->
                cn-of T1 t ->
                tm-of F (tm/lam T1 (\x. E x)) (arrow T1 T2)

| tm-of/app : tm-of F E2 T1 ->
                tm-of F E1 (arrow T1 T2) ->
                tm-of F (tm/app E1 E2) T2

| tm-of/in1 : cn-of T2 t ->
                tm-of F E T1 ->
                tm-of F (tm/in1 E T2) (plus T1 T2)

| tm-of/in2 : cn-of T1 t ->
                tm-of F E T2 ->
                tm-of F (tm/in2 E T1) (plus T1 T2)

| tm-of/case : ({ x : term } tm-assm x T1 -> tm-of F (E1 x) T) ->
                 ({ x : term } tm-assm x T2 -> tm-of F (E2 x) T) ->
                 tm-of F E (plus T1 T2) ->
                 tm-of F (tm/case E E1 E2) T

| tm-of/refloc : cn-of T t ->
                   st-lookup F L (et/ref T) ->
                   tm-of F (tm/refloc L) (ref T)

| tm-of/ref : tm-of F E T -> tm-of F (tm/ref E) (ref T)

| tm-of/deref : tm-of F E (ref T) -> tm-of F (tm/deref E) T

| tm-of/assign : tm-of F E2 T ->
                   tm-of F E1 (ref T) ->
                   tm-of F (tm/assign E1 E2) unit

| tm-of/tagloc : cn-of T t ->
                   st-lookup F L (et/tag T) ->
                   tm-of F (tm/tagloc L) (tag T)

| tm-of/newtag : cn-of T t -> tm-of F (tm/newtag T) (tag T)

| tm-of/tag : tm-of F E2 T ->
                tm-of F E1 (tag T) ->
                tm-of F (tm/tag E1 E2) tagged

| tm-of/iftag : tm-of F E4 T ->
                  ({ x : term } tm-assm x T' -> tm-of F (E3 x) T) ->
                  tm-of F E2 (tag T') ->
                  tm-of F E1 tagged ->
                  tm-of F (tm/iftag E1 E2 E3 E4) T

| tm-of/unroll : tm-of F E (rec' K C1 C2) ->
                   tm-of F (tm/unroll E) (C1 (lam K (\a. rec' K C1 a)) C2)

| tm-of/in : tm-of F E T -> tm-of F (tm/in I E) (labeled I T)

| tm-of/out : tm-of F E (labeled I T) -> tm-of F (tm/out E) T

| tm-of/raise : cn-of T t -> tm-of F E tagged -> tm-of F (tm/raise E T) T

| tm-of/try : ({ x : term } tm-assm x tagged -> tm-of F (E2 x) T) ->
                tm-of F E1 T ->
                tm-of F (tm/try E1 (\x. E2 x)) T

| tm-of/lett : ({ x : term } tm-assm x T1 -> tm-of F (E2 x) T2) ->
                 tm-of F E1 T1 ->
                 tm-of F (tm/lett E1 (\x. E2 x)) T2

| tm-of/snd : md-of P F M (sg/datom T) -> tm-of F (tm/snd M) T

| tm-of/equiv : cn-equiv T1 T2 t -> tm-of F E T1 -> tm-of F E T2

% Store Type Lookup

and st-lookup : sttp -> location -> entp -> type =
| st-lookup/hit : st-lookup (st/cons _ L ET) L ET
| st-lookup/miss : st-lookup F L ET -> st-lookup (st/cons F _ _) L ET

% Entry Typing

and entry-of : sttp -> entry -> entp -> type =
| entry-of/ref : value E -> tm-of F E T -> entry-of F (entry/ref E) (et/ref T)
| entry-of/tag : cn-of T t -> entry-of F (entry/tag T) (et/tag T)

% Signature Formation

and sg-wf : sg -> type =
| sg-wf/one : sg-wf sg/one

| sg-wf/satom : kd-wf K -> sg-wf (sg/satom K)

| sg-wf/datom : cn-of T t -> sg-wf (sg/datom T)

| sg-wf/sgatom : sg-wf S -> sg-wf (sg/sgatom S)

| sg-wf/pi : ({ a : con } cn-of a K -> sg-wf (S2 a)) ->
               sg-fst S1 K ->
               sg-wf S1 ->
               sg-wf (sg/pi S1 S2)

| sg-wf/sigma : ({ a : con } cn-of a K ->
                  sg-wf (S2 a)) ->
                  sg-fst S1 K ->
                  sg-wf S1 ->
                  sg-wf (sg/sigma S1 S2)

| sg-wf/named : sg-wf S -> sg-wf (sg/named L S)

and sg-equiv : sg -> sg -> type =
| sg-equiv/refl : sg-wf S -> sg-equiv S S

| sg-equiv/symm : sg-equiv S1 S2 -> sg-equiv S2 S1

| sg-equiv/trans : sg-equiv S1 S2 -> sg-equiv S2 S3 -> sg-equiv S1 S3

| sg-equiv/satom : kd-equiv K1 K2 -> sg-equiv (sg/satom K1) (sg/satom K2)

| sg-equiv/datom : cn-equiv T1 T2 t -> sg-equiv (sg/datom T1) (sg/datom T2)

| sg-equiv/sgatom : sg-equiv S1 S2 -> sg-equiv (sg/sgatom S1) (sg/sgatom S2)

| sg-equiv/pi : ({ a : con } cn-of a K1 -> sg-equiv (S2 a) (S2' a)) ->
                  sg-fst S1 K1 ->
                  sg-equiv S1 S1' ->
                  sg-equiv (sg/pi S1 S2) (sg/pi S1' S2')

| sg-equiv/sigma : ({ a : con } cn-of a K1 -> sg-equiv (S2 a) (S2' a)) ->
                     sg-fst S1 K1 ->
                     sg-equiv S1 S1' ->
                     sg-equiv (sg/sigma S1 S2) (sg/sigma S1' S2')

| sg-equiv/named : sg-equiv S S' -> sg-equiv (sg/named L S) (sg/named L S')

and sg-sub : sg -> sg -> type =
| sg-sub/refl : sg-equiv S1 S2 -> sg-sub S1 S2

| sg-sub/trans : sg-sub S1 S2 -> sg-sub S2 S3 -> sg-sub S1 S3

| sg-sub/satom : kd-sub K1 K2 -> sg-sub (sg/satom K1) (sg/satom K2)

| sg-sub/pi : ({ a : con } cn-of a K1 -> sg-wf (S2 a)) ->
                sg-fst S1 K1 ->
                ({ a : con } cn-of a K1' -> sg-sub (S2 a) (S2' a)) ->
                sg-fst S1' K1' ->
                sg-sub S1' S1 ->
                sg-sub (sg/pi S1 S2) (sg/pi S1' S2')

| sg-sub/sigma : ({ a : con } cn-of a K1' -> sg-wf (S2' a)) ->
                   sg-fst S1' K1' ->
                   ({ a : con } cn-of a K1 -> sg-sub (S2 a) (S2' a)) ->
                   sg-fst S1 K1 ->
                   sg-sub S1 S1' ->
                   sg-sub (sg/sigma S1 S2) (sg/sigma S1' S2')

| sg-sub/named : sg-sub S S' -> sg-sub (sg/named L S) (sg/named L S')

and sg-fst : sg -> kind -> type =
| sg-sub/reflid : sg-wf S -> sg-sub S S
| sg-sub/one : sg-sub sg/one sg/one
| sg-sub/datom : cn-equiv T1 T2 t -> sg-sub (sg/datom T1) (sg/datom T2)
| sg-sub/sgatom : sg-equiv S1 S2 -> sg-sub (sg/sgatom S1) (sg/sgatom S2)

% Module Formation

and md-of : purity -> sttp -> module' -> sg -> type =
| md-of/var : md-assm X S -> md-of pure F X S

| md-of/unit : md-of pure F md/unit sg/one

| md-of/satom : cn-of C K -> md-of pure F (md/satom C) (sg/satom K)

| md-of/sgatom : sg-wf S -> md-of pure F (md/sgatom S) (sg/sgatom S)

| md-of/datom : tm-of F E T -> md-of pure F (md/datom E T) (sg/datom T)

| md-of/pair : md-of P F M1 S1 ->
                 md-of P F M2 S2 ->
                 md-of P F (md/pair M1 M2) (sg/sigma S1 (\x. S2))

| md-of/dpair : md-of P F M1 S1 ->
                  sg-fst S1 K1 ->
                  ({ a : con } cn-of a K1 ->
                    { m : module' } md-assm m S1 ->
                    md-fst m a ->
                    md-of P F (M2 a m) (S2 a)) ->
                  md-of P F (md/dpair M1 (\a. \m. M2 a m)) (sg/sigma S1 S2)

| md-of/pi1 : md-of pure F M (sg/sigma S1 S2) -> md-of pure F (md/pi1 M) S1

| md-of/pi2 : md-of pure F M (sg/sigma S1 S2) ->
                md-fst M C ->
                md-of pure F (md/pi2 M) (S2 (pi1 C))

| md-of/lam : sg-wf S1 ->
                sg-fst S1 K1 ->
                ({ a : con } cn-of a K1 ->
                  { m : module' } md-assm m S1 ->
                  md-fst m a ->
                  md-of P F (M a m) (S2 a)) ->
                md-of pure F (md/lam S1 M) (sg/pi S1 S2)

| md-of/app : md-of P F M1 (sg/pi S1 S2) ->
                md-of pure F M2 S1 ->
                md-fst M2 C2 ->
                md-of impure F (md/app M1 M2) (S2 C2)

| md-of/in : md-of P F M S -> md-of P F (md/in L M) (sg/named L S)

| md-of/out : md-of P F M (sg/named L S) -> md-of P F (md/out M) S

| md-of/let : md-of P1 F M1 S1 ->
                sg-fst S1 K1 ->
                ({ a : con } cn-of a K1 ->
                  { m : module' } md-assm m S1 ->
                  md-fst m a ->
                  md-of P2 F (M2 a m) S) ->
                md-of impure F (md/let M1 M2 S) S

| md-of/letp : md-of pure F M1 S1 ->
                 sg-fst S1 K1 ->
                 md-fst M1 C1 ->
                 ({ a : con } cn-of a K1 ->
                   { m : module' } md-assm m S1 ->
                   md-fst m a ->
                   md-of P F (M2 a m) (S2 a)) ->
                 md-of P F (md/letp M1 M2) (S2 C1)

| md-of/lete : tm-of F E T ->
                 ({ x : term } tm-assm x T -> md-of P F (M x) S) ->
                 md-of P F (md/lete E T (\x. M x)) S

| md-of/seal : md-of P F M S -> md-of impure F (md/seal M S) S

| md-of/self : md-of pure F M (sg/satom K') ->
                 md-fst M C ->
                 cn-of C K ->
                 md-of pure F M (sg/satom K)

| md-of/extsigma : md-of pure F (md/pi1 M) S1 ->
                     md-of pure F (md/pi2 M) S2 ->
                     md-of pure F M (sg/sigma S1 (\x. S2))

| md-of/extnamed : md-of pure F M (sg/named L S') ->
                     md-of pure F (md/out M) S ->
                     md-of pure F M (sg/named L S)

| md-of/forget : md-of pure F M S -> md-of impure F M S

| md-of/subsume : md-of P F M S -> sg-sub S S' -> md-of P F M S'

% Module Fst

and md-fst : module' -> con -> type =
| md-fst/unit : md-fst md/unit star

| md-fst/satom : md-fst (md/satom C) C

| md-fst/datom : md-fst (md/datom E _) star

| md-fst/sgatom : md-fst (md/sgatom S) star

| md-fst/pair : md-fst M1 C1 ->
                  md-fst M2 C2 ->
                  md-fst (md/pair M1 M2) (pair C1 C2)

| md-fst/dpair : md-fst M1 C1 ->
                   ({ a : con } { m : module' } md-fst m a ->
                     md-fst (M2 a m) (C2 a)) ->
                   md-fst (md/dpair M1 (\a. \m. M2 a m)) (pair C1 (C2 C1))

| md-fst/pi1 : md-fst M C -> md-fst (md/pi1 M) (pi1 C)

| md-fst/pi2 : md-fst M C -> md-fst (md/pi2 M) (pi2 C)

| md-fst/lam : md-fst (md/lam S (\a. \m. M a m)) star

| md-fst/in : md-fst M C -> md-fst (md/in L M) C

| md-fst/out : md-fst M C -> md-fst (md/out M) C

| md-fst/letp : md-fst M1 C1 ->
                  ({ a : con } { m : module' } md-fst m a ->
                    md-fst (M2 a m) (C2 a)) ->
                  md-fst (md/letp M1 (\a. \m. M2 a m)) (C2 C1)

| md-fst/lete : ({ x : term } md-fst (M x) C) ->
                  md-fst (md/lete E T (\x. M x)) C
;

% Derived Rules

proof md-of/equiv : [ |- sg-equiv S S'] ->
                      [ |- md-of P F M S] -> [ |- md-of P F M S'] =
/ total /
intros
{ S : ( |- sg),
  S' : ( |- sg),
  P : ( |- purity),
  F : ( |- sttp),
  M : ( |- module')
| x : [ |- sg-equiv S S'], x1 : [ |- md-of P F M S]
; by x as X unboxed;
  by x1 as X1 unboxed;
  solve [ |- md-of/subsume X1 (sg-sub/refl X)]
}
;

% Store Typing

LF store-bounds : store -> location -> type =
| store-bounds/nil : store-bounds store/nil L

| store-bounds/cons : loc-lt L L' -> store-bounds (store/cons _ L _) L'
;

LF store-of : sttp -> store -> sttp -> type =
| store-of/nil : store-of F store/nil st/nil

| store-of/cons : store-bounds ST L ->
                    entry-of F EN ET ->
                    store-of F ST F' ->
                    store-of F (store/cons ST L EN) (st/cons F' L ET)
;

% Schemas

schema conblock = block (a : con);

schema conbind = some [K : kind] block (a : con, d : cn-of a K);
