% Syntactic classes

kind : type.
--name kind K.

con : type.
--name con C a.

sg : type.
--name sg S.

term : type.
--name term E x.

module' : type.
--name module' M m.

entry : type.
--name entry EN.

store : type.
--name store ST.

entp : type.
--name entp ET.

sttp : type.
--name sttp F.

name : type.
--name name L.

% Kinds

t : kind.
sing : con -> kind.
pi : kind -> (con -> kind) -> kind.
sigma : kind -> (con -> kind) -> kind.
one : kind.

% Constructors

pair : con -> con -> con.
pi1 : con -> con.
pi2 : con -> con.
lam : kind -> (con -> con) -> con.
app : con -> con -> con.
star : con.

unit : con.
void : con.
prod : con -> con -> con.
arrow : con -> con -> con.
plus : con -> con -> con.
ref : con -> con.
tag : con -> con.
tagged : con.
rec' : kind -> (con -> con -> con) -> con -> con.
labeled : label -> con -> con.

% Signatures


sg/one		: sg.
sg/satom	: kind -> sg.
sg/datom	: con -> sg.
sg/sgatom	: sg -> sg.

sg/pi		: sg -> (con -> sg) -> sg.
sg/sigma	: sg -> (con -> sg) -> sg.
sg/named	: name -> sg -> sg.


% Terms

tm/unit : term.

tm/abort : term -> con -> term.

tm/pair : term -> term -> term.
tm/pi1 : term -> term.
tm/pi2 : term -> term.

tm/lam : con -> (term -> term) -> term.
tm/app : term -> term -> term.

tm/in1 : term -> con -> term.
tm/in2 : term -> con -> term.
tm/case : term -> (term -> term) -> (term -> term) -> term.

tm/refloc : location -> term.
tm/ref : term -> term.
tm/deref : term -> term.
tm/assign : term -> term -> term.

% Modules

md/unit : module'.
md/satom : con -> module'.
md/datom : term -> con -> module'.
md/sgatom : sg -> module'.

md/pair : module' -> module' -> module'.
md/dpair : module' -> (con -> module' -> module') -> module'.
md/pi1 : module' -> module'.
md/pi2 : module' -> module'.

md/lam : sg -> (con -> module' -> module') -> module'.
md/app : module' -> module' -> module'.

md/in : name -> module' -> module'.
md/out : module' -> module'.

md/let : module' -> (con -> module' -> module') -> sg -> module'.
md/letp : module' -> (con -> module' -> module') -> module'.
md/lete : term -> con -> (term -> module') -> module'.

md/seal : module' -> sg -> module'.

% Entries & Stores

entry/ref : term -> entry.
entry/tag : con -> entry.

store/nil : store.
store/cons : store -> location -> entry -> store.

% Entry & Store Types

et/ref : con -> entp.
et/tag : con -> entp.

st/nil : sttp.
st/cons : sttp -> location -> entp -> sttp.

% Purity

LF purity : type =
| pure : purity
| impure : purity
;
--name purity P.
