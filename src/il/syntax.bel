% Kinds

LF kind : type =
| t : kind
| sing : con -> kind
| pi : kind -> (con -> kind) -> kind
| sigma : kind -> (con -> kind) -> kind
| one : kind

% Constructors

and con : type =
| pair : con -> con -> con
| pi1 : con -> con
| pi2 : con -> con
| lam : kind -> (con -> con) -> con
| app : con -> con -> con
| star : con

| unit : con
| void : con
| prod : con -> con -> con
| arrow : con -> con -> con
| plus : con -> con -> con
| ref : con -> con
| tag : con -> con
| tagged : con
| rec' : kind -> (con -> con -> con) -> con -> con
| labeled : label -> con -> con
;
--name kind K.
--name con C a.

% Names

LF name : type =
| name/val : identifier -> name
| name/con : identifier -> name
| name/mod : identifier -> name
| name/fun : identifier -> name
| name/sig : identifier -> name
| name/dtc : identifier -> name
| name/ec : identifier -> name

| name/ordinary : name
| name/dcon0 : nat -> nat -> name
| name/dcon1 : nat -> nat -> name
| name/econ0 : name
| name/econ1 : name

| name/basis : name
| name/hide : name
| name/funcarg : name
;
--name name L.

% Signatures

LF sg : type =
| sg/one : sg
| sg/satom : kind -> sg
| sg/datom : con -> sg
| sg/sgatom : sg -> sg

| sg/pi : sg -> (con -> sg) -> sg
| sg/sigma : sg -> (con -> sg) -> sg
| sg/named : name -> sg -> sg
;
--name sg S.

% Terms

LF term : type =
| tm/unit : term
| tm/abort : term -> con -> term

| tm/pair : term -> term -> term
| tm/pi1 : term -> term
| tm/pi2 : term -> term

| tm/lam : con -> (term -> term) -> term
| tm/app : term -> term -> term

| tm/in1 : term -> con -> term
| tm/in2 : term -> con -> term
| tm/case : term -> (term -> term) -> (term -> term) -> term

| tm/refloc : location -> term
| tm/ref : term -> term
| tm/deref : term -> term
| tm/assign : term -> term -> term

| tm/tagloc : location -> term
| tm/newtag : con -> term

| tm/tag : term -> term -> term
| tm/iftag : term -> term -> (term -> term) -> term -> term

| tm/roll : term -> kind -> (con -> con -> con) -> con -> term
| tm/unroll : term -> term

| tm/in : label -> term -> term
| tm/out : term -> term

| tm/raise : term -> con -> term
| tm/try : term -> (term -> term) -> term

| tm/lett : term -> (term -> term) -> term

| tm/snd : module' -> term

% Modules

and module' : type =
| md/unit : module'
| md/satom : con -> module'
| md/datom : term -> con -> module'
| md/sgatom : sg -> module'

| md/pair : module' -> module' -> module'
| md/dpair : module' -> (con -> module' -> module') -> module'
| md/pi1 : module' -> module'
| md/pi2 : module' -> module'

| md/lam : sg -> (con -> module' -> module') -> module'
| md/app : module' -> module' -> module'

| md/in : name -> module' -> module'
| md/out : module' -> module'

| md/let : module' -> (con -> module' -> module') -> sg -> module'
| md/letp : module' -> (con -> module' -> module') -> module'
| md/lete : term -> con -> (term -> module') -> module'

| md/seal : module' -> sg -> module'
;
--name term E x.
--name module' M m.

% Entries & Stores

LF entry : type =
| entry/ref : term -> entry
| entry/tag : con -> entry
;
--name entry EN.

LF store : type =
| store/nil : store
| store/cons : store -> location -> entry -> store
;
--name store ST.

% Entry & Store Types

LF entp : type =
| et/ref : con -> entp
| et/tag : con -> entp
;
--name entp ET.

LF sttp : type =
| st/nil : sttp
| st/cons : sttp -> location -> entp -> sttp
;
--name sttp F.

% Purity

LF purity : type =
| pure : purity
| impure : purity
;
--name purity P.
