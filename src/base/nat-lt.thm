% Lt

proof leq-lt-trans : [ |- leq N1 N2] -> [ |- lt N2 N3] -> [ |- lt N1 N3] =
/ total 1 /
intros
{ N : ( |- nat), N1 : ( |- nat), N2 : ( |- nat)
| x : [ |- leq N N1], x1 : [ |- lt N1 N2]
; split x as
  case leq/s:
  { N3 : ( |- nat), N4 : ( |- nat), N2 : ( |- nat), X : ( |- leq N3 N4)
  | x : [ |- leq (succ N3) (succ N4)], x1 : [ |- lt (succ N4) N2]
  ; split x1 as
    case lt/s:
    { N3 : ( |- nat),
      N4 : ( |- nat),
      N6 : ( |- nat),
      X : ( |- leq N3 N4),
      X1 : ( |- lt N4 N6)
    | x : [ |- leq (succ N3) (succ N4)], x1 : [ |- lt (succ N4) (succ N6)]
    ; by leq-lt-trans [ |- X] [ |- X1] as L unboxed;
      solve [ |- lt/s L]
    }
  }
  case leq/z:
  { N1 : ( |- nat), N2 : ( |- nat)
  | x : [ |- leq zero N1], x1 : [ |- lt N1 N2]
  ; split x1 as
    case lt/s:
    { N3 : ( |- nat), N4 : ( |- nat), X : ( |- lt N3 N4)
    | x : [ |- leq zero (succ N3)], x1 : [ |- lt (succ N3) (succ N4)]
    ; solve [ |- lt/z ]
    }
    case lt/z:
    { N3 : ( |- nat)
    | x : [ |- leq zero zero], x1 : [ |- lt zero (succ N3)]
    ; solve x1
    }
  }
}
;

proof lt-leq-trans : [ |- lt N1 N2] -> [ |- leq N2 N3] -> [ |- lt N1 N3] =
/ total 1 /
intros
{ N : ( |- nat), N1 : ( |- nat), N2 : ( |- nat)
| x : [ |- lt N N1], x1 : [ |- leq N1 N2]
; split x as
  case lt/s:
  { N3 : ( |- nat), N4 : ( |- nat), N2 : ( |- nat), X : ( |- lt N3 N4)
  | x : [ |- lt (succ N3) (succ N4)], x1 : [ |- leq (succ N4) N2]
  ; split x1 as
    case leq/s:
    { N3 : ( |- nat),
      N4 : ( |- nat),
      N6 : ( |- nat),
      X : ( |- lt N3 N4),
      X1 : ( |- leq N4 N6)
    | x : [ |- lt (succ N3) (succ N4)], x1 : [ |- leq (succ N4) (succ N6)]
    ; by lt-leq-trans [ |- X] [ |- X1] as L unboxed;
      solve [ |- lt/s L]
    }
  }
  case lt/z:
  { N3 : ( |- nat), N2 : ( |- nat)
  | x : [ |- lt zero (succ N3)], x1 : [ |- leq (succ N3) N2]
  ; split x1 as
    case leq/s:
    { N3 : ( |- nat), N5 : ( |- nat), X : ( |- leq N3 N5)
    | x : [ |- lt zero (succ N3)], x1 : [ |- leq (succ N3) (succ N5)]
    ; solve [ |- lt/z ]
    }
  }
}
;

proof lt-trans : [ |- lt N1 N2] -> [ |- lt N2 N3] -> [ |- lt N1 N3] =
/ total 1 /
intros
{ N : ( |- nat), N1 : ( |- nat), N2 : ( |- nat)
| x : [ |- lt N N1], x1 : [ |- lt N1 N2]
; split x as
  case lt/s:
  { N3 : ( |- nat), N4 : ( |- nat), N2 : ( |- nat), X : ( |- lt N3 N4)
  | x : [ |- lt (succ N3) (succ N4)], x1 : [ |- lt (succ N4) N2]
  ; split x1 as
    case lt/s:
    { N3 : ( |- nat),
      N4 : ( |- nat),
      N6 : ( |- nat),
      X : ( |- lt N3 N4),
      X1 : ( |- lt N4 N6)
    | x : [ |- lt (succ N3) (succ N4)], x1 : [ |- lt (succ N4) (succ N6)]
    ; by lt-trans [ |- X] [ |- X1] as L unboxed;
      solve [ |- lt/s L]
    }
  }
  case lt/z:
  { N3 : ( |- nat), N2 : ( |- nat)
  | x : [ |- lt zero (succ N3)], x1 : [ |- lt (succ N3) N2]
  ; split x1 as
    case lt/s:
    { N3 : ( |- nat), N5 : ( |- nat), X : ( |- lt N3 N5)
    | x : [ |- lt zero (succ N3)], x1 : [ |- lt (succ N3) (succ N5)]
    ; solve [ |- lt/z ]
    }
  }
}
;

proof sum-implies-lt : [ |- sum N1 N2 N3] -> 
                         [ |- lt zero N2] -> [ |- lt N1 N3] =
/ total 1 /
intros
{ N : ( |- nat), N1 : ( |- nat), N2 : ( |- nat)
| x : [ |- sum N N1 N2], x1 : [ |- lt zero N1]
; split x as
  case sum/s:
  { N3 : ( |- nat), N1 : ( |- nat), N5 : ( |- nat), X : ( |- sum N3 N1 N5)
  | x : [ |- sum (succ N3) N1 (succ N5)], x1 : [ |- lt zero N1]
  ; by sum-implies-lt [ |- X] x1 as L unboxed;
    solve [ |- lt/s L]
  }
  case sum/z:
  { N2 : ( |- nat)
  | x : [ |- sum zero N2 N2], x1 : [ |- lt zero N2]
  ; solve x1
  }
}
;

proof sum-implies-lt' : [ |- sum N1 N2 N3] ->
                          [ |- lt zero N1] -> [ |- lt N2 N3] =
/ total /
intros
{ N : ( |- nat), N1 : ( |- nat), N2 : ( |- nat)
| x : [ |- sum N N1 N2], x1 : [ |- lt zero N]
; solve sum-implies-lt (sum-commute x) x1
}
;

proof lt-succ : { N : [|- nat] } [ |- lt N (succ N)] =
/ total 1 /
intros
{ N : ( |- nat)
| 
; split [ |- N] as
  case succ:
  { N1 : ( |- nat)
  | 
  ; by lt-succ [ |- N1] as L unboxed;
    solve [ |- lt/s L]
  }
  case zero:
  { 
  | 
  ; solve [ |- lt/z ]
  }
}
;
