% Compare

proof compare-succ : [ |- compare N N'] -> [ |- compare (succ N) (succ N')] =
/ total /
intros
{ N : ( |- nat), N' : ( |- nat)
| x : [ |- compare N N']
; split x as
  case compare/gt:
  { N : ( |- nat), N' : ( |- nat), X : ( |- lt N' N)
  | x : [ |- compare N N']
  ; solve [ |- compare/gt (lt/s X)]
  }
  case compare/eq:
  { N' : ( |- nat)
  | x : [ |- compare N' N']
  ; solve [ |- compare/eq ]
  }
  case compare/lt:
  { N : ( |- nat), N' : ( |- nat), X : ( |- lt N N')
  | x : [ |- compare N N']
  ; solve [ |- compare/lt (lt/s X)]
  }
}
;

proof trichotomy-nat : { N : [ |- nat] } { N' : [ |- nat] } [ |- compare N N'] =
/ total /
intros
{ N : ( |- nat), N' : ( |- nat)
| 
; split [ |- N] as
  case succ:
  { N1 : ( |- nat), N' : ( |- nat)
  | 
  ; split [ |- N'] as
    case succ:
    { N1 : ( |- nat), N2 : ( |- nat)
    | 
    ; by trichotomy-nat [ |- N1] [ |- N2] as l;
      by compare-succ l as k;
      solve k
    }
    case zero:
    { N1 : ( |- nat)
    | 
    ; solve [ |- compare/gt (lt/z )]
    }
  }
  case zero:
  { N' : ( |- nat)
  | 
  ; split [ |- N'] as
    case succ:
    { N : ( |- nat)
    | 
    ; solve [ |- compare/lt (lt/z )]
    }
    case zero:
    { 
    | 
    ; solve [ |- compare/eq ]
    }
  }
}
;
