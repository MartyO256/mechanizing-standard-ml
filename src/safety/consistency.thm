% Map into the singleton language

LF map : con -> eterm -> type =
| map/pair : map C1 M1 ->
               map C2 M2 ->
               map (pair C1 C2) (epair M1 M2)

| map/pi1 : map C M ->
              map (pi1 C) (epi1 M)

| map/pi2 : map C M ->
              map (pi2 C) (epi2 M)

| map/lam : ({a : con} {x : eterm} map a x ->
              map (C a) (M x)) ->
              tmap K A ->
              map (lam K C) (elam A M)

| map/app : map C1 M1 ->
              map C2 M2 ->
              map (app C1 C2) (eapp M1 M2)

| map/star : map star estar

| map/unit : map unit (econst const/unit)

| map/void : map void (econst const/void)

| map/prod : map C1 M1 ->
               map C2 M2 ->
               map (prod C1 C2) (eapp (eapp (econst const/prod) M1) M2)

| map/arrow : map C1 M1 ->
                map C2 M2 ->
                map (arrow C1 C2) (eapp (eapp (econst const/arrow) M1) M2)

| map/plus : map C1 M1 ->
               map C2 M2 ->
               map (plus C1 C2) (eapp (eapp (econst const/plus) M1) M2)

| map/ref : map C M ->
              map (ref C) (eapp (econst const/ref) M)

| map/tag : map C M ->
              map (tag C) (eapp (econst const/tag) M)

| map/tagged : map tagged (econst const/tagged)

| map/rec : flay A SK MA ->
              map C2 M2 ->
              ({a : con} {x : eterm} map a x ->
                {b : con} {y : eterm} map b y ->
                map (C1 a b) (M1 x y)) ->
              tmap K A ->
              map (rec' K C1 C2)
                (eapp (econst (const/rec SK))
                (epair
                  MA
                  (epair (elam (epi A (\x. et))
                  (\x. elam A (\y. M1 x y))) M2))
                )

| map/labeled : map C M ->
                  map (labeled I C) (eapp (econst (const/labeled I)) M)

and tmap : kind -> etp -> type =
| tmap/t : tmap t et

| tmap/sing : map C M -> tmap (sing C) (esing M)

| tmap/pi : ({a : con} {x : eterm} map a x -> tmap (K2 a) (A2 x)) ->
              tmap K1 A1 -> tmap (pi K1 K2) (epi A1 A2)

| tmap/sigma : ({a : con} {x : eterm} map a x -> tmap (K2 a) (A2 x)) ->
                 tmap K1 A1 -> tmap (sigma K1 K2) (esigma A1 A2)

| tmap/one : tmap one eone
;

% Map from the singleton language

LF unmap : eterm -> con -> type =
| unmap/app : unmap M1 C1 -> unmap M2 C2 -> unmap (eapp M1 M2) (app C1 C2)

| unmap/pi1 : unmap M C -> unmap (epi1 M) (pi1 C)

| unmap/pi2 : unmap M C -> unmap (epi2 M) (pi2 C)

| unmap/lam : tunmap A K ->
                ({x : eterm} {a : con} unmap x a -> unmap (M x) (C a)) ->
                unmap (elam A M) (lam K C)

| unmap/pair : unmap M1 C1 -> unmap M2 C2 -> unmap (epair M1 M2) (pair C1 C2)

| unmap/star : unmap estar star

| unmap/unit : unmap (econst const/unit) unit

| unmap/void : unmap (econst const/void) void

| unmap/prod : unmap (econst const/prod) (lam t (\a. lam t (\b. prod a b)))

| unmap/arrow : unmap (econst const/arrow) (lam t (\a. lam t (\b. arrow a b)))

| unmap/plus : unmap (econst const/plus) (lam t (\a. lam t (\b. plus a b)))

| unmap/ref : unmap (econst const/ref) (lam t (\a. ref a))

| unmap/tag : unmap (econst const/tag) (lam t (\a. tag a))

| unmap/tagged : unmap (econst const/tagged) tagged

| unmap/rec :
    skof-il SK K L ->
      unmap (econst (const/rec SK))
        (lam
          (sigma K
            (\a. sigma
              (pi (pi (L a) (\l. t)) (\k. (pi (L a) (\l. t))))
              (\l. (L a))
            )
          )
          (\b. rec'
            (L (pi1 b)) (\c. \d. app (app (pi1 (pi2 b)) c) d) (pi2 (pi2 b))
          )
        )

| unmap/labeled : unmap (econst (const/labeled I)) (lam t (\a. labeled I a))

and tunmap : etp -> kind -> type =
| tunmap/t : tunmap et t

| tunmap/sing : unmap M C -> tunmap (esing M) (sing C)

| tunmap/pi : tunmap A1 K1 ->
                ({x : eterm} {a : con} unmap x a -> tunmap (A2 x) (K2 a)) ->
                tunmap (epi A1 A2) (pi K1 K2)

| tunmap/sigma : tunmap A1 K1 ->
                   ({x : eterm} {a : con} unmap x a -> tunmap (A2 x) (K2 a)) ->
                   tunmap (esigma A1 A2) (sigma K1 K2)

| tunmap/one : tunmap eone one
;
--name map Dmap map.
--name tmap Dtmap tmap.
--name unmap Dunmap unmap.
--name tunmap Dtunmap tunmap.

schema unmap-block = some [a : con] block (x : eterm, xt : unmap x a);

schema conblock+unmap-block = block (a : con)
                            + some [a : con] block (x : eterm, xt : unmap x a);

proof unmap-resp :
  (g : conblock+unmap-block)
  [g |- eterm-eq M M'] ->
  [g |- con-eq C C'] ->
  [g |- unmap M C] ->
    [g |- unmap M' C'] =
/ total /
intros
{ g : conblock+unmap-block,
  M : (g |- eterm),
  M' : (g |- eterm),
  C : (g |- con),
  C' : (g |- con)
| eq : [g |- eterm-eq M M'],
  eq1 : [g |- con-eq C C'],
  unmap : [g |- unmap M C]
; split eq as
  case eterm-eq/i:
  { g : conblock+unmap-block,
    M' : (g |- eterm),
    C : (g |- con),
    C' : (g |- con)
  | eq : [g |- eterm-eq M' M'],
    eq1 : [g |- con-eq C C'],
    unmap : [g |- unmap M' C]
  ; split eq1 as
    case con-eq/i:
    { g : conblock+unmap-block, M' : (g |- eterm), C' : (g |- con)
    | eq : [g |- eterm-eq M' M'],
      eq1 : [g |- con-eq C' C'],
      unmap : [g |- unmap M' C']
    ; solve unmap
    }
  }
}
;

proof tunmap-resp :
  (g : conblock+unmap-block)
  [g |- etp-eq A A'] ->
  [g |- kind-eq K K'] ->
  [g |- tunmap A K] ->
    [g |- tunmap A' K'] =
/ total /
intros
{ g : conblock+unmap-block,
  A : (g |- etp),
  A' : (g |- etp),
  K : (g |- kind),
  K' : (g |- kind)
| eq : [g |- etp-eq A A'],
  eq1 : [g |- kind-eq K K'],
  tunmap : [g |- tunmap A K]
; split eq as
  case etp-eq/i:
  { g : conblock+unmap-block,
    A' : (g |- etp),
    K : (g |- kind),
    K' : (g |- kind)
  | eq : [g |- etp-eq A' A'],
    eq1 : [g |- kind-eq K K'],
    tunmap : [g |- tunmap A' K]
  ; split eq1 as
    case kind-eq/i:
    { g : conblock+unmap-block, A' : (g |- etp), K' : (g |- kind)
    | eq : [g |- etp-eq A' A'],
      eq1 : [g |- kind-eq K' K'],
      tunmap : [g |- tunmap A' K']
    ; solve tunmap
    }
  }
}
;

% Map Effectiveness

schema can-map-ctx =
  % evar
  block (ex : eterm) +
  % can-map-bind
  some [m : eterm]
  block (a : con, at : map a m) +
  % map-bind-for-can-map
  some [b : etp, k : kind]
  block (
    x : eterm, d : evof x b,
    a : con, e : cn-of a k,
    at : map a x
  ) +
  % invert-bind-for-can-map
  some [
    K : kind, K' : kind,
    B : etp,
    DmapK : tmap K B, DmapB : tunmap B K',
    DwfK : kd-wf K,
    DwfB : ewf B,
    DequivK : kd-equiv K K'
  ]
  block (
    a : con, da : cn-of a K,
    x : eterm, dx : evof x B,
    at : map a x, xt : unmap x a
  );

LF can-map/e : con -> type =
| can-map/i :
  { M : eterm }
  map C M ->
    can-map/e C
;

LF can-tmap/e : kind -> type =
| can-tmap/i :
  { A : etp }
  tmap K A ->
    can-tmap/e K
;

proof can-map :
  (g : can-map-ctx)
  { C : [g |- con] }
  [g |- can-map/e C] =
/ total 1 /
intros
{ g : can-map-ctx,
  C : (g |- con)
|
; split [_ |- C] as
  case labeled:
  { g : can-map-ctx,
    X : (g |- label),
    C1 : (g |- con)
  |
  ; split can-map [g |- C1] as
    case can-map/i:
    { g : can-map-ctx,
      X : (g |- label),
      C1 : (g |- con),
      M : (g |- eterm),
      Dmap : (g |- map C1 M)
    |
    ; solve [g |- can-map/i _ (map/labeled Dmap)]
    }
  }
  case rec':
  { g : can-map-ctx,
    K : (g |- kind),
    C1 : (g, y180 : con, x180 : con |- con),
    C2 : (g |- con)
  |
  ; split can-tmap [g |- K] as
    case can-tmap/i:
    { g : can-map-ctx,
      K : (g |- kind),
      C1 : (g, y180 : con, x180 : con |- con),
      C2 : (g |- con),
      A : (g |- etp),
      Dtmap : (g |- tmap K A)
    |
    ; %{ FIXME: Totality checking for complete induction error.
         invert can-map [_, b1 : block (x : eterm, d1 : evof x (A[..]), a : con, e1 : cn-of a (K[..]), at1 : map a x), b2 : block (y : eterm, d2 : evof y (A[..]), b : con, e1 : cn-of b (K[..]), at2 : map b y) |- C1[.., b1.a, b2.b]]
      }%
      ?
    }
  }
  case tagged:
  { g : can-map-ctx
  |
  ; solve [g |- can-map/i _ map/tagged]
  }
  case tag:
  { g : can-map-ctx,
    C1 : (g |- con)
  |
  ; split can-map [g |- C1] as
    case can-map/i:
    { g : can-map-ctx,
      C1 : (g |- con),
      M : (g |- eterm),
      Dmap : (g |- map C1 M)
    |
    ; solve [g |- can-map/i _ (map/tag Dmap)]
    }
  }
  case ref:
  { g : can-map-ctx,
    C1 : (g |- con)
  |
  ; split can-map [g |- C1] as
    case can-map/i:
    { g : can-map-ctx,
      C1 : (g |- con),
      M : (g |- eterm),
      Dmap : (g |- map C1 M)
    |
    ; solve [g |- can-map/i _ (map/ref Dmap)]
    }
  }
  case plus:
  { g : can-map-ctx,
    C1 : (g |- con),
    C2 : (g |- con)
  |
  ; split can-map [g |- C1] as
    case can-map/i:
    { g : can-map-ctx,
      C1 : (g |- con),
      C2 : (g |- con),
      M : (g |- eterm),
      Dmap : (g |- map C1 M)
    |
    ; split can-map [g |- C2] as
      case can-map/i:
      { g : can-map-ctx,
        C1 : (g |- con),
        C2 : (g |- con),
        M : (g |- eterm),
        Dmap : (g |- map C1 M),
        M1 : (g |- eterm),
        Dmap1 : (g |- map C2 M1)
      |
      ; solve [g |- can-map/i _ (map/plus Dmap Dmap1)]
      }
    }
  }
  case arrow:
  { g : can-map-ctx,
    C1 : (g |- con),
    C2 : (g |- con)
  |
  ; split can-map [g |- C1] as
    case can-map/i:
    { g : can-map-ctx,
      C1 : (g |- con),
      C2 : (g |- con),
      M : (g |- eterm),
      Dmap : (g |- map C1 M)
    |
    ; split can-map [g |- C2] as
      case can-map/i:
      { g : can-map-ctx,
        C1 : (g |- con),
        C2 : (g |- con),
        M : (g |- eterm),
        Dmap : (g |- map C1 M),
        M1 : (g |- eterm),
        Dmap1 : (g |- map C2 M1)
      |
      ; solve [g |- can-map/i _ (map/arrow Dmap Dmap1)]
      }
    }
  }
  case prod:
  { g : can-map-ctx,
    C1 : (g |- con),
    C2 : (g |- con)
  |
  ; split can-map [g |- C1] as
    case can-map/i:
    { g : can-map-ctx,
      C1 : (g |- con),
      C2 : (g |- con),
      M : (g |- eterm),
      Dmap : (g |- map C1 M)
    |
    ; split can-map [g |- C2] as
      case can-map/i:
      { g : can-map-ctx,
        C1 : (g |- con),
        C2 : (g |- con),
        M : (g |- eterm),
        Dmap : (g |- map C1 M),
        M1 : (g |- eterm),
        Dmap1 : (g |- map C2 M1)
      |
      ; solve
          [g |-
             can-map/i (eapp (eapp (econst const/prod) M) M1)
             (map/prod Dmap Dmap1)]
      }
    }
  }
  case void:
  { g : can-map-ctx
  |
  ; solve [g |- can-map/i _ map/void]
  }
  case unit:
  { g : can-map-ctx
  |
  ; solve [g |- can-map/i _ map/unit]
  }
  case star:
  { g : can-map-ctx
  |
  ; solve [g |- can-map/i _ map/star]
  }
  case app:
  { g : can-map-ctx,
    C1 : (g |- con),
    C2 : (g |- con)
  |
  ; split can-map [g |- C1] as
    case can-map/i:
    { g : can-map-ctx,
      C1 : (g |- con),
      C2 : (g |- con),
      M : (g |- eterm),
      Dmap : (g |- map C1 M)
    |
    ; split can-map [g |- C2] as
      case can-map/i:
      { g : can-map-ctx,
        C1 : (g |- con),
        C2 : (g |- con),
        M : (g |- eterm),
        Dmap : (g |- map C1 M),
        M1 : (g |- eterm),
        Dmap1 : (g |- map C2 M1)
      |
      ; solve [g |- can-map/i (eapp M M1) (map/app Dmap Dmap1)]
      }
    }
  }
  case lam:
  { g : can-map-ctx,
    K : (g |- kind),
    C1 : (g, x175 : con |- con)
  |
  ; split can-tmap [g |- K] as
    case can-tmap/i:
    { g : can-map-ctx,
      K : (g |- kind),
      C1 : (g, x175 : con |- con),
      A : (g |- etp),
      Dtmap : (g |- tmap K A)
    |
    ; split
can-map
  [g,
   b :
     block (
       x : eterm,
       d : evof x (A[..]),
       a : con,
       e : cn-of a (K[..]),
       at : map a x) |- C1[.., b.3]] as
      case can-map/i:
      { g : can-map-ctx,
        K : (g |- kind),
        C2 : (g, a : con |- con),
        A : (g |- etp),
        Dtmap : (g |- tmap K A),
        M : (g, x : eterm |- eterm),
        Dmap :
          (g, x : eterm, a : con, e : cn-of a (K[..]), z808 : map a x |-
             map (C2[.., a]) (M[.., x]))
      |
      ; %{ FIXME: Solution contains uninstantiated metavariables.
           Type matches subgoal.
           solve [_|- can-map/i _ (map/lam (\a. \x. \xt. Dmap[.., x, a, _, xt]) Dtmap)]
        }%
        ?
      }
    }
  }
  case pi2:
  { g : can-map-ctx,
    C1 : (g |- con)
  |
  ; split can-map [g |- C1] as
    case can-map/i:
    { g : can-map-ctx,
      C1 : (g |- con),
      M : (g |- eterm),
      Dmap : (g |- map C1 M)
    |
    ; solve [g |- can-map/i (epi2 M) (map/pi2 Dmap)]
    }
  }
  case pi1:
  { g : can-map-ctx,
    C1 : (g |- con)
  |
  ; split can-map [g |- C1] as
    case can-map/i:
    { g : can-map-ctx,
      C1 : (g |- con),
      M : (g |- eterm),
      Dmap : (g |- map C1 M)
    |
    ; solve [g |- can-map/i (epi1 M) (map/pi1 Dmap)]
    }
  }
  case pair:
  { g : can-map-ctx,
    C1 : (g |- con),
    C2 : (g |- con)
  |
  ; split can-map [g |- C1] as
    case can-map/i:
    { g : can-map-ctx,
      C1 : (g |- con),
      C2 : (g |- con),
      M : (g |- eterm),
      Dmap : (g |- map C1 M)
    |
    ; split can-map [g |- C2] as
      case can-map/i:
      { g : can-map-ctx,
        C1 : (g |- con),
        C2 : (g |- con),
        M : (g |- eterm),
        Dmap : (g |- map C1 M),
        M1 : (g |- eterm),
        Dmap1 : (g |- map C2 M1)
      |
      ; solve [g |- can-map/i (epair M M1) (map/pair Dmap Dmap1)]
      }
    }
  }
  %{ FIXME: File "src/core/reconstruct.ml", line 2248, characters 11-16: Pattern matching failed
  case #.1:
  { g : can-map-ctx,
    K433 : (g |- kind),
    A20 : (g |- etp),
    #unmap :
      #(g |-
          block (
            a : con,
            da : cn-of a (K433[..]),
            x : eterm,
            dx : evof x (A20[..]),
            at : map a x,
            xt : unmap x a)),
    K434 : (g |- kind),
    Dtmap4 : (g |- tmap K433 A20),
    Dtunmap : (g |- tunmap A20 K434),
    Dwf61 : (g |- kd-wf K433),
    Y : (g |- ewf A20),
    Dequiv37 : (g |- kd-equiv K433 K434)
  |
  ; solve [_ |- can-map/i #unmap.3 #unmap.5]
  }
  case #.3:
  { g : can-map-ctx,
    A21 : (g |- etp),
    K435 : (g |- kind),
    #map :
      #(g |-
          block (
            x : eterm,
            d : evof x (A21[..]),
            a : con,
            e : cn-of a (K435[..]),
            at : map a x))
  |
  ; solve [_ |- can-map/i #map.1 #map.5]
  }
  case #.1:
  { g : can-map-ctx,
    M9 : (g |- eterm),
    #map : #(g |- block (a : con, at : map a (M9[..])))
  |
  ; solve [_ |- can-map/i _ #map.2]
  }
  }%
}

and proof can-tmap :
  (g : can-map-ctx)
  { K : [g |- kind] }
  [g |- can-tmap/e K] =
/ total 1 /
intros
{ g : can-map-ctx,
  K : (g |- kind)
|
; split [_ |- K] as
  case one:
  { g : can-map-ctx
  |
  ; solve [g |- can-tmap/i _ tmap/one]
  }
  case sigma:
  { g : can-map-ctx,
    K1 : (g |- kind),
    K2 : (g, y173 : con |- kind)
  |
  ; split can-tmap [g |- K1] as
    case can-tmap/i:
    { g : can-map-ctx,
      K1 : (g |- kind),
      K2 : (g, y173 : con |- kind),
      A : (g |- etp),
      Dtmap : (g |- tmap K1 A)
    |
    ; split
can-tmap
  [g,
   b :
     block (
       x : eterm,
       d : evof x (A[..]),
       a : con,
       e : cn-of a (K1[..]),
       at : map a x) |- K2[.., b.3]] as
      case can-tmap/i:
      { g : can-map-ctx,
        K1 : (g |- kind),
        K3 : (g, a : con |- kind),
        A : (g |- etp),
        Dtmap : (g |- tmap K1 A),
        A1 : (g, x : eterm |- etp),
        Dtmap1 :
          (g, x : eterm, a : con, e : cn-of a (K1[..]), y3 : map a x |-
             tmap (K3[.., a]) (A1[.., x]))
      |
      ; %{ FIXME: Solution contains uninstantiated metavariables.
           Type matches subgoal.
           solve [_|- can-tmap/i _ (tmap/sigma (\a. \x. \xt. Dtmap1[.., x, a, _, xt]) Dtmap)]
        }%
        ?
      }
    }
  }
  case pi:
  { g : can-map-ctx,
    K1 : (g |- kind),
    K2 : (g, y172 : con |- kind)
  |
  ; split can-tmap [g |- K1] as
    case can-tmap/i:
    { g : can-map-ctx,
      K1 : (g |- kind),
      K2 : (g, y172 : con |- kind),
      A : (g |- etp),
      Dtmap : (g |- tmap K1 A)
    |
    ; split
can-tmap
  [g,
   b :
     block (
       x : eterm,
       d : evof x (A[..]),
       a : con,
       e : cn-of a (K1[..]),
       at : map a x) |- K2[.., b.3]] as
      case can-tmap/i:
      { g : can-map-ctx,
        K1 : (g |- kind),
        K3 : (g, a : con |- kind),
        A : (g |- etp),
        Dtmap : (g |- tmap K1 A),
        A1 : (g, x : eterm |- etp),
        Dtmap1 :
          (g, x : eterm, a : con, e : cn-of a (K1[..]), y6 : map a x |-
             tmap (K3[.., a]) (A1[.., x]))
      |
      ; %{ FIXME: Solution contains uninstantiated metavariables.
          Type matches subgoal.
          solve [_|- can-tmap/i _ (tmap/pi (\a. \x. \xt. Dtmap1[.., x, a, _, xt]) Dtmap)]
        }%
        ?
      }
    }
  }
  case sing:
  { g : can-map-ctx,
    C : (g |- con)
  |
  ; split can-map [g |- C] as
    case can-map/i:
    { g : can-map-ctx,
      C : (g |- con),
      M : (g |- eterm),
      Dmap : (g |- map C M)
    |
    ; solve [g |- can-tmap/i _ (tmap/sing Dmap)]
    }
  }
  case t:
  { g : can-map-ctx
  |
  ; solve [g |- can-tmap/i _ tmap/t]
  }
}
;

% Map Functionality

schema map-fun-ctx =
  % evar
  block (ex : eterm) +
  % map-fun-bind
  some [x : eterm]
  block (a : con, at : map a x) +
  % map-bind-for-map-fun
  some [b : etp, k : kind]
  block (
    x : eterm, d : evof x b,
    a : con, e : cn-of a k,
    at : map a x
  ) +
  % invert-bind-for-map-fun
  some [K : kind, B : etp]
  block (
    a : con, da : cn-of a K,
    x : eterm, dx : evof x B,
    at : map a x
  );

proof map-fun :
  (g : map-fun-ctx)
  [g |- map C M] ->
  [g |- map C M'] ->
    [g |- eterm-eq M M'] =
/ total 1 /
intros
{ g : map-fun-ctx, C : (g |- con), M : (g |- eterm), M' : (g |- eterm)
| x : [g |- map C M], map : [g |- map C M']
; split x as
  case map/labeled:
  { g : map-fun-ctx,
    X : (g |- label),
    C1 : (g |- con),
    M1 : (g |- eterm),
    M' : (g |- eterm),
    Dmap : (g |- map C1 M1)
  | x : [g |- map (labeled X C1) (eapp (econst (const/labeled X)) M1)],
    map : [g |- map (labeled X C1) M']
  ; split map as
    case map/labeled:
    { g : map-fun-ctx,
      X : (g |- label),
      C1 : (g |- con),
      M1 : (g |- eterm),
      M2 : (g |- eterm),
      Dmap : (g |- map C1 M1),
      Dmap1 : (g |- map C1 M2)
    | x : [g |- map (labeled X C1) (eapp (econst (const/labeled X)) M1)],
      map : [g |- map (labeled X C1) (eapp (econst (const/labeled X)) M2)]
    ; split map-fun [g |- Dmap] [g |- Dmap1] as
      case eterm-eq/i:
      { g : map-fun-ctx,
        X : (g |- label),
        C1 : (g |- con),
        M2 : (g |- eterm),
        Dmap : (g |- map C1 M2),
        Dmap1 : (g |- map C1 M2)
      | x : [g |- map (labeled X C1) (eapp (econst (const/labeled X)) M2)],
        map : [g |- map (labeled X C1) (eapp (econst (const/labeled X)) M2)]
      ; solve [g |- eterm-eq/i ]
      }
    }
  }
  case map/rec:
  { g : map-fun-ctx,
    K : (g |- kind),
    C2 : (g, a137 : con, a136 : con |- con),
    C1 : (g |- con),
    Dskel : ( |- skel),
    M1 : (g |- eterm),
    A : (g |- etp),
    M3 : (g, z750 : eterm, x750 : eterm |- eterm),
    M2 : (g |- eterm),
    M' : (g |- eterm),
    Dflay : (g |- flay A Dskel[] M1),
    Dmap : (g |- map C1 M2),
    Dmap1 :
      (g, a : con, x : eterm, z749 : map a x, b : con, y : eterm,
       y750 : map b y |- map (C2[.., a, b]) (M3[.., x, y])),
    Dtmap : (g |- tmap K A)
  | x :
      [g |-
         map
           (rec' K (\x255. \z255. C2) C1)
           (eapp (econst (const/rec Dskel[]))
           (epair M1
           (epair (elam (epi A (\x. et)) (\x. elam (A[..]) (\y. M3))) M2)))],
    map : [g |- map (rec' K (\x255. \z255. C2) C1) M']
  ; split map as
    case map/rec:
    { g : map-fun-ctx,
      K : (g |- kind),
      C2 : (g, a137 : con, a136 : con |- con),
      C1 : (g |- con),
      Dskel : ( |- skel),
      M1 : (g |- eterm),
      A : (g |- etp),
      M3 : (g, z750 : eterm, x750 : eterm |- eterm),
      M2 : (g |- eterm),
      Dskel1 : ( |- skel),
      M4 : (g |- eterm),
      A1 : (g |- etp),
      M6 : (g, z750 : eterm, x750 : eterm |- eterm),
      M5 : (g |- eterm),
      Dflay : (g |- flay A Dskel[] M1),
      Dmap : (g |- map C1 M2),
      Dmap1 :
        (g, a : con, x : eterm, z749 : map a x, b : con, y : eterm,
         y750 : map b y |- map (C2[.., a, b]) (M3[.., x, y])),
      Dtmap : (g |- tmap K A),
      Dflay1 : (g |- flay A1 Dskel1[] M4),
      Dmap2 : (g |- map C1 M5),
      Dmap3 :
        (g, a : con, x : eterm, z749 : map a x, b : con, y : eterm,
         y750 : map b y |- map (C2[.., a, b]) (M6[.., x, y])),
      Dtmap1 : (g |- tmap K A1)
    | x :
        [g |-
           map
             (rec' K (\x255. \z255. C2) C1)
             (eapp (econst (const/rec Dskel[]))
             (epair M1
             (epair (elam (epi A (\x. et)) (\x. elam (A[..]) (\y. M3))) M2)))],
      map :
        [g |-
           map
             (rec' K (\x255. \z255. C2) C1)
             (eapp (econst (const/rec Dskel1[]))
             (epair M4
             (epair (elam (epi A1 (\x. et)) (\x. elam (A1[..]) (\y. M6))) M5)))]
    ; split tmap-fun [g |- Dtmap] [g |- Dtmap1] as
      case etp-eq/i:
      { g : map-fun-ctx,
        K : (g |- kind),
        C2 : (g, a137 : con, a136 : con |- con),
        C1 : (g |- con),
        Dskel : ( |- skel),
        M1 : (g |- eterm),
        A1 : (g |- etp),
        M3 : (g, z750 : eterm, x750 : eterm |- eterm),
        M2 : (g |- eterm),
        Dskel1 : ( |- skel),
        M4 : (g |- eterm),
        M6 : (g, z750 : eterm, x750 : eterm |- eterm),
        M5 : (g |- eterm),
        Dflay : (g |- flay A1 Dskel[] M1),
        Dmap : (g |- map C1 M2),
        Dmap1 :
          (g, a : con, x : eterm, z749 : map a x, b : con, y : eterm,
           y750 : map b y |- map (C2[.., a, b]) (M3[.., x, y])),
        Dtmap : (g |- tmap K A1),
        Dflay1 : (g |- flay A1 Dskel1[] M4),
        Dmap2 : (g |- map C1 M5),
        Dmap3 :
          (g, a : con, x : eterm, z749 : map a x, b : con, y : eterm,
           y750 : map b y |- map (C2[.., a, b]) (M6[.., x, y])),
        Dtmap1 : (g |- tmap K A1)
      | x :
          [g |-
             map
               (rec' K (\x255. \z255. C2) C1)
               (eapp (econst (const/rec Dskel[]))
               (epair M1
               (epair (elam (epi A1 (\x. et)) (\x. elam (A1[..]) (\y. M3)))
               M2)))],
        map :
          [g |-
             map
               (rec' K (\x255. \z255. C2) C1)
               (eapp (econst (const/rec Dskel1[]))
               (epair M4
               (epair (elam (epi A1 (\x. et)) (\x. elam (A1[..]) (\y. M6)))
               M5)))]
      ; split map-fun [g |- Dmap] [g |- Dmap2] as
        case eterm-eq/i:
        { g : map-fun-ctx,
          K : (g |- kind),
          C2 : (g, a137 : con, a136 : con |- con),
          C1 : (g |- con),
          Dskel : ( |- skel),
          M1 : (g |- eterm),
          A1 : (g |- etp),
          M3 : (g, z750 : eterm, x750 : eterm |- eterm),
          M5 : (g |- eterm),
          Dskel1 : ( |- skel),
          M4 : (g |- eterm),
          M6 : (g, z750 : eterm, x750 : eterm |- eterm),
          Dflay : (g |- flay A1 Dskel[] M1),
          Dmap : (g |- map C1 M5),
          Dmap1 :
            (g, a : con, x : eterm, z749 : map a x, b : con, y : eterm,
             y750 : map b y |- map (C2[.., a, b]) (M3[.., x, y])),
          Dtmap : (g |- tmap K A1),
          Dflay1 : (g |- flay A1 Dskel1[] M4),
          Dmap2 : (g |- map C1 M5),
          Dmap3 :
            (g, a : con, x : eterm, z749 : map a x, b : con, y : eterm,
             y750 : map b y |- map (C2[.., a, b]) (M6[.., x, y])),
          Dtmap1 : (g |- tmap K A1)
        | x :
            [g |-
               map
                 (rec' K (\x255. \z255. C2) C1)
                 (eapp (econst (const/rec Dskel[]))
                 (epair M1
                 (epair (elam (epi A1 (\x. et)) (\x. elam (A1[..]) (\y. M3)))
                 M5)))],
          map :
            [g |-
               map
                 (rec' K (\x255. \z255. C2) C1)
                 (eapp (econst (const/rec Dskel1[]))
                 (epair M4
                 (epair (elam (epi A1 (\x. et)) (\x. elam (A1[..]) (\y. M6)))
                 M5)))]
        ; %{ FIXME: Totality checking for complete induction error.
              invert map-fun [_, b1 : block (x : eterm, d : evof x (A1[..]), a : con, e : cn-of a (K[..]), at : map a x), b2 : block (x : eterm, d : evof x (A1[..]), a : con, e : cn-of a (K[..]), at : map a x)|- Dmap1[.., b1.a, b1.x, b1.at, b2.a, b2.x, b2.at]] [_, b1, b2 |- Dmap3[.., b1.a, b1.x, b1.at, b2.a, b2.x, b2.at]]
          }%
          ?
        }
      }
    }
  }
  case map/tagged:
  { g : map-fun-ctx, M' : (g |- eterm)
  | x : [g |- map tagged (econst const/tagged)], map : [g |- map tagged M']
  ; split map as
    case map/tagged:
    { g : map-fun-ctx
    | x : [g |- map tagged (econst const/tagged)],
      map : [g |- map tagged (econst const/tagged)]
    ; solve [g |- eterm-eq/i ]
    }
  }
  case map/tag:
  { g : map-fun-ctx,
    C1 : (g |- con),
    M1 : (g |- eterm),
    M' : (g |- eterm),
    Dmap : (g |- map C1 M1)
  | x : [g |- map (tag C1) (eapp (econst const/tag) M1)],
    map : [g |- map (tag C1) M']
  ; split map as
    case map/tag:
    { g : map-fun-ctx,
      C1 : (g |- con),
      M1 : (g |- eterm),
      M2 : (g |- eterm),
      Dmap : (g |- map C1 M1),
      Dmap1 : (g |- map C1 M2)
    | x : [g |- map (tag C1) (eapp (econst const/tag) M1)],
      map : [g |- map (tag C1) (eapp (econst const/tag) M2)]
    ; split map-fun [g |- Dmap] [g |- Dmap1] as
      case eterm-eq/i:
      { g : map-fun-ctx,
        C1 : (g |- con),
        M2 : (g |- eterm),
        Dmap : (g |- map C1 M2),
        Dmap1 : (g |- map C1 M2)
      | x : [g |- map (tag C1) (eapp (econst const/tag) M2)],
        map : [g |- map (tag C1) (eapp (econst const/tag) M2)]
      ; solve [g |- eterm-eq/i ]
      }
    }
  }
  case map/ref:
  { g : map-fun-ctx,
    C1 : (g |- con),
    M1 : (g |- eterm),
    M' : (g |- eterm),
    Dmap : (g |- map C1 M1)
  | x : [g |- map (ref C1) (eapp (econst const/ref) M1)],
    map : [g |- map (ref C1) M']
  ; split map as
    case map/ref:
    { g : map-fun-ctx,
      C1 : (g |- con),
      M1 : (g |- eterm),
      M2 : (g |- eterm),
      Dmap : (g |- map C1 M1),
      Dmap1 : (g |- map C1 M2)
    | x : [g |- map (ref C1) (eapp (econst const/ref) M1)],
      map : [g |- map (ref C1) (eapp (econst const/ref) M2)]
    ; split map-fun [g |- Dmap] [g |- Dmap1] as
      case eterm-eq/i:
      { g : map-fun-ctx,
        C1 : (g |- con),
        M2 : (g |- eterm),
        Dmap : (g |- map C1 M2),
        Dmap1 : (g |- map C1 M2)
      | x : [g |- map (ref C1) (eapp (econst const/ref) M2)],
        map : [g |- map (ref C1) (eapp (econst const/ref) M2)]
      ; solve [g |- eterm-eq/i ]
      }
    }
  }
  case map/plus:
  { g : map-fun-ctx,
    C1 : (g |- con),
    C2 : (g |- con),
    M1 : (g |- eterm),
    M2 : (g |- eterm),
    M' : (g |- eterm),
    Dmap : (g |- map C1 M1),
    Dmap1 : (g |- map C2 M2)
  | x : [g |- map (plus C1 C2) (eapp (eapp (econst const/plus) M1) M2)],
    map : [g |- map (plus C1 C2) M']
  ; split map as
    case map/plus:
    { g : map-fun-ctx,
      C1 : (g |- con),
      C2 : (g |- con),
      M1 : (g |- eterm),
      M2 : (g |- eterm),
      M3 : (g |- eterm),
      M4 : (g |- eterm),
      Dmap : (g |- map C1 M1),
      Dmap1 : (g |- map C2 M2),
      Dmap2 : (g |- map C1 M3),
      Dmap3 : (g |- map C2 M4)
    | x : [g |- map (plus C1 C2) (eapp (eapp (econst const/plus) M1) M2)],
      map : [g |- map (plus C1 C2) (eapp (eapp (econst const/plus) M3) M4)]
    ; split map-fun [g |- Dmap] [g |- Dmap2] as
      case eterm-eq/i:
      { g : map-fun-ctx,
        C1 : (g |- con),
        C2 : (g |- con),
        M3 : (g |- eterm),
        M2 : (g |- eterm),
        M4 : (g |- eterm),
        Dmap : (g |- map C1 M3),
        Dmap1 : (g |- map C2 M2),
        Dmap2 : (g |- map C1 M3),
        Dmap3 : (g |- map C2 M4)
      | x : [g |- map (plus C1 C2) (eapp (eapp (econst const/plus) M3) M2)],
        map : [g |- map (plus C1 C2) (eapp (eapp (econst const/plus) M3) M4)]
      ; split map-fun [g |- Dmap1] [g |- Dmap3] as
        case eterm-eq/i:
        { g : map-fun-ctx,
          C1 : (g |- con),
          C2 : (g |- con),
          M3 : (g |- eterm),
          M4 : (g |- eterm),
          Dmap : (g |- map C1 M3),
          Dmap1 : (g |- map C2 M4),
          Dmap2 : (g |- map C1 M3),
          Dmap3 : (g |- map C2 M4)
        | x : [g |- map (plus C1 C2) (eapp (eapp (econst const/plus) M3) M4)],
          map :
            [g |- map (plus C1 C2) (eapp (eapp (econst const/plus) M3) M4)]
        ; solve [g |- eterm-eq/i ]
        }
      }
    }
  }
  case map/arrow:
  { g : map-fun-ctx,
    C1 : (g |- con),
    C2 : (g |- con),
    M1 : (g |- eterm),
    M2 : (g |- eterm),
    M' : (g |- eterm),
    Dmap : (g |- map C1 M1),
    Dmap1 : (g |- map C2 M2)
  | x : [g |- map (arrow C1 C2) (eapp (eapp (econst const/arrow) M1) M2)],
    map : [g |- map (arrow C1 C2) M']
  ; split map as
    case map/arrow:
    { g : map-fun-ctx,
      C1 : (g |- con),
      C2 : (g |- con),
      M1 : (g |- eterm),
      M2 : (g |- eterm),
      M3 : (g |- eterm),
      M4 : (g |- eterm),
      Dmap : (g |- map C1 M1),
      Dmap1 : (g |- map C2 M2),
      Dmap2 : (g |- map C1 M3),
      Dmap3 : (g |- map C2 M4)
    | x : [g |- map (arrow C1 C2) (eapp (eapp (econst const/arrow) M1) M2)],
      map : [g |- map (arrow C1 C2) (eapp (eapp (econst const/arrow) M3) M4)]
    ; split map-fun [g |- Dmap] [g |- Dmap2] as
      case eterm-eq/i:
      { g : map-fun-ctx,
        C1 : (g |- con),
        C2 : (g |- con),
        M3 : (g |- eterm),
        M2 : (g |- eterm),
        M4 : (g |- eterm),
        Dmap : (g |- map C1 M3),
        Dmap1 : (g |- map C2 M2),
        Dmap2 : (g |- map C1 M3),
        Dmap3 : (g |- map C2 M4)
      | x : [g |- map (arrow C1 C2) (eapp (eapp (econst const/arrow) M3) M2)],
        map :
          [g |- map (arrow C1 C2) (eapp (eapp (econst const/arrow) M3) M4)]
      ; split map-fun [g |- Dmap1] [g |- Dmap3] as
        case eterm-eq/i:
        { g : map-fun-ctx,
          C1 : (g |- con),
          C2 : (g |- con),
          M3 : (g |- eterm),
          M4 : (g |- eterm),
          Dmap : (g |- map C1 M3),
          Dmap1 : (g |- map C2 M4),
          Dmap2 : (g |- map C1 M3),
          Dmap3 : (g |- map C2 M4)
        | x :
            [g |- map (arrow C1 C2) (eapp (eapp (econst const/arrow) M3) M4)],
          map :
            [g |- map (arrow C1 C2) (eapp (eapp (econst const/arrow) M3) M4)]
        ; solve [g |- eterm-eq/i ]
        }
      }
    }
  }
  case map/prod:
  { g : map-fun-ctx,
    C1 : (g |- con),
    C2 : (g |- con),
    M1 : (g |- eterm),
    M2 : (g |- eterm),
    M' : (g |- eterm),
    Dmap : (g |- map C1 M1),
    Dmap1 : (g |- map C2 M2)
  | x : [g |- map (prod C1 C2) (eapp (eapp (econst const/prod) M1) M2)],
    map : [g |- map (prod C1 C2) M']
  ; split map as
    case map/prod:
    { g : map-fun-ctx,
      C1 : (g |- con),
      C2 : (g |- con),
      M1 : (g |- eterm),
      M2 : (g |- eterm),
      M3 : (g |- eterm),
      M4 : (g |- eterm),
      Dmap : (g |- map C1 M1),
      Dmap1 : (g |- map C2 M2),
      Dmap2 : (g |- map C1 M3),
      Dmap3 : (g |- map C2 M4)
    | x : [g |- map (prod C1 C2) (eapp (eapp (econst const/prod) M1) M2)],
      map : [g |- map (prod C1 C2) (eapp (eapp (econst const/prod) M3) M4)]
    ; split map-fun [g |- Dmap] [g |- Dmap2] as
      case eterm-eq/i:
      { g : map-fun-ctx,
        C1 : (g |- con),
        C2 : (g |- con),
        M3 : (g |- eterm),
        M2 : (g |- eterm),
        M4 : (g |- eterm),
        Dmap : (g |- map C1 M3),
        Dmap1 : (g |- map C2 M2),
        Dmap2 : (g |- map C1 M3),
        Dmap3 : (g |- map C2 M4)
      | x : [g |- map (prod C1 C2) (eapp (eapp (econst const/prod) M3) M2)],
        map : [g |- map (prod C1 C2) (eapp (eapp (econst const/prod) M3) M4)]
      ; split map-fun [g |- Dmap1] [g |- Dmap3] as
        case eterm-eq/i:
        { g : map-fun-ctx,
          C1 : (g |- con),
          C2 : (g |- con),
          M3 : (g |- eterm),
          M4 : (g |- eterm),
          Dmap : (g |- map C1 M3),
          Dmap1 : (g |- map C2 M4),
          Dmap2 : (g |- map C1 M3),
          Dmap3 : (g |- map C2 M4)
        | x : [g |- map (prod C1 C2) (eapp (eapp (econst const/prod) M3) M4)],
          map :
            [g |- map (prod C1 C2) (eapp (eapp (econst const/prod) M3) M4)]
        ; solve [g |- eterm-eq/i ]
        }
      }
    }
  }
  case map/void:
  { g : map-fun-ctx, M' : (g |- eterm)
  | x : [g |- map void (econst const/void)], map : [g |- map void M']
  ; split map as
    case map/void:
    { g : map-fun-ctx
    | x : [g |- map void (econst const/void)],
      map : [g |- map void (econst const/void)]
    ; solve [g |- eterm-eq/i ]
    }
  }
  case map/unit:
  { g : map-fun-ctx, M' : (g |- eterm)
  | x : [g |- map unit (econst const/unit)], map : [g |- map unit M']
  ; split map as
    case map/unit:
    { g : map-fun-ctx
    | x : [g |- map unit (econst const/unit)],
      map : [g |- map unit (econst const/unit)]
    ; solve [g |- eterm-eq/i ]
    }
  }
  case map/star:
  { g : map-fun-ctx, M' : (g |- eterm)
  | x : [g |- map star estar], map : [g |- map star M']
  ; split map as
    case map/star:
    { g : map-fun-ctx
    | x : [g |- map star estar], map : [g |- map star estar]
    ; solve [g |- eterm-eq/i ]
    }
  }
  case map/app:
  { g : map-fun-ctx,
    C1 : (g |- con),
    C2 : (g |- con),
    M1 : (g |- eterm),
    M2 : (g |- eterm),
    M' : (g |- eterm),
    Dmap : (g |- map C1 M1),
    Dmap1 : (g |- map C2 M2)
  | x : [g |- map (app C1 C2) (eapp M1 M2)], map : [g |- map (app C1 C2) M']
  ; split map as
    case map/app:
    { g : map-fun-ctx,
      C1 : (g |- con),
      C2 : (g |- con),
      M1 : (g |- eterm),
      M2 : (g |- eterm),
      M3 : (g |- eterm),
      M4 : (g |- eterm),
      Dmap : (g |- map C1 M1),
      Dmap1 : (g |- map C2 M2),
      Dmap2 : (g |- map C1 M3),
      Dmap3 : (g |- map C2 M4)
    | x : [g |- map (app C1 C2) (eapp M1 M2)],
      map : [g |- map (app C1 C2) (eapp M3 M4)]
    ; split map-fun [g |- Dmap] [g |- Dmap2] as
      case eterm-eq/i:
      { g : map-fun-ctx,
        C1 : (g |- con),
        C2 : (g |- con),
        M3 : (g |- eterm),
        M2 : (g |- eterm),
        M4 : (g |- eterm),
        Dmap : (g |- map C1 M3),
        Dmap1 : (g |- map C2 M2),
        Dmap2 : (g |- map C1 M3),
        Dmap3 : (g |- map C2 M4)
      | x : [g |- map (app C1 C2) (eapp M3 M2)],
        map : [g |- map (app C1 C2) (eapp M3 M4)]
      ; split map-fun [g |- Dmap1] [g |- Dmap3] as
        case eterm-eq/i:
        { g : map-fun-ctx,
          C1 : (g |- con),
          C2 : (g |- con),
          M3 : (g |- eterm),
          M4 : (g |- eterm),
          Dmap : (g |- map C1 M3),
          Dmap1 : (g |- map C2 M4),
          Dmap2 : (g |- map C1 M3),
          Dmap3 : (g |- map C2 M4)
        | x : [g |- map (app C1 C2) (eapp M3 M4)],
          map : [g |- map (app C1 C2) (eapp M3 M4)]
        ; solve [g |- eterm-eq/i ]
        }
      }
    }
  }
  case map/lam:
  { g : map-fun-ctx,
    K : (g |- kind),
    C1 : (g, a135 : con |- con),
    A : (g |- etp),
    M1 : (g, z744 : eterm |- eterm),
    M' : (g |- eterm),
    Dmap :
      (g, a : con, x : eterm, x744 : map a x |- map (C1[.., a]) (M1[.., x])),
    Dtmap : (g |- tmap K A)
  | x : [g |- map (lam K (\z250. C1)) (elam A (\x131. M1))],
    map : [g |- map (lam K (\z250. C1)) M']
  ; split map as
    case map/lam:
    { g : map-fun-ctx,
      K : (g |- kind),
      C1 : (g, a135 : con |- con),
      A : (g |- etp),
      M1 : (g, z744 : eterm |- eterm),
      A1 : (g |- etp),
      M2 : (g, z744 : eterm |- eterm),
      Dmap :
        (g, a : con, x : eterm, x744 : map a x |- map (C1[.., a]) (M1[.., x])),
      Dtmap : (g |- tmap K A),
      Dmap1 :
        (g, a : con, x : eterm, x744 : map a x |- map (C1[.., a]) (M2[.., x])),
      Dtmap1 : (g |- tmap K A1)
    | x : [g |- map (lam K (\z250. C1)) (elam A (\x131. M1))],
      map : [g |- map (lam K (\z250. C1)) (elam A1 (\x131. M2))]
    ; split tmap-fun [g |- Dtmap] [g |- Dtmap1] as
      case etp-eq/i:
      { g : map-fun-ctx,
        K : (g |- kind),
        C1 : (g, a135 : con |- con),
        A1 : (g |- etp),
        M1 : (g, z744 : eterm |- eterm),
        M2 : (g, z744 : eterm |- eterm),
        Dmap :
          (g, a : con, x : eterm, x744 : map a x |-
             map (C1[.., a]) (M1[.., x])),
        Dtmap : (g |- tmap K A1),
        Dmap1 :
          (g, a : con, x : eterm, x744 : map a x |-
             map (C1[.., a]) (M2[.., x])),
        Dtmap1 : (g |- tmap K A1)
      | x : [g |- map (lam K (\z250. C1)) (elam A1 (\x131. M1))],
        map : [g |- map (lam K (\z250. C1)) (elam A1 (\x131. M2))]
      ; split
        map-fun
          [g,
           b :
             block (
               x : eterm,
               d : evof x (A1[..]),
               a : con,
               e : cn-of a (K[..]),
               at : map a x) |- Dmap[.., b.3, b.1, b.5]]
          [g,
           b :
             block (
               x : eterm,
               d : evof x (A1[..]),
               a : con,
               e : cn-of a (K[..]),
               at : map a x) |- Dmap1[.., b.3, b.1, b.5]] as
        case eterm-eq/i:
        { g : map-fun-ctx,
          K : (g |- kind),
          C1 : (g, a135 : con |- con),
          A1 : (g |- etp),
          M3 : (g, x : eterm |- eterm),
          Dmap :
            (g, a : con, x : eterm, x744 : map a x |-
               map (C1[.., a]) (M3[.., x])),
          Dtmap : (g |- tmap K A1),
          Dmap1 :
            (g, a : con, x : eterm, x744 : map a x |-
               map (C1[.., a]) (M3[.., x])),
          Dtmap1 : (g |- tmap K A1)
        | x : [g |- map (lam K (\z250. C1)) (elam A1 (\x131. M3))],
          map : [g |- map (lam K (\z250. C1)) (elam A1 (\x131. M3))]
        ; solve [g |- eterm-eq/i ]
        }
      }
    }
  }
  case map/pi2:
  { g : map-fun-ctx,
    C1 : (g |- con),
    M1 : (g |- eterm),
    M' : (g |- eterm),
    Dmap : (g |- map C1 M1)
  | x : [g |- map (pi2 C1) (epi2 M1)], map : [g |- map (pi2 C1) M']
  ; split map as
    case map/pi2:
    { g : map-fun-ctx,
      C1 : (g |- con),
      M1 : (g |- eterm),
      M2 : (g |- eterm),
      Dmap : (g |- map C1 M1),
      Dmap1 : (g |- map C1 M2)
    | x : [g |- map (pi2 C1) (epi2 M1)], map : [g |- map (pi2 C1) (epi2 M2)]
    ; by map-fun [g |- Dmap] [g |- Dmap1] as Deq1 unboxed;
      solve eterm-resp-eterm [x : eterm |- epi2 x] [g |- Deq1]
    }
  }
  case map/pi1:
  { g : map-fun-ctx,
    C1 : (g |- con),
    M1 : (g |- eterm),
    M' : (g |- eterm),
    Dmap : (g |- map C1 M1)
  | x : [g |- map (pi1 C1) (epi1 M1)], map : [g |- map (pi1 C1) M']
  ; split map as
    case map/pi1:
    { g : map-fun-ctx,
      C1 : (g |- con),
      M1 : (g |- eterm),
      M2 : (g |- eterm),
      Dmap : (g |- map C1 M1),
      Dmap1 : (g |- map C1 M2)
    | x : [g |- map (pi1 C1) (epi1 M1)], map : [g |- map (pi1 C1) (epi1 M2)]
    ; by map-fun [g |- Dmap] [g |- Dmap1] as Deq1 unboxed;
      solve eterm-resp-eterm [x : eterm |- epi1 x] [g |- Deq1]
    }
  }
  case map/pair:
  { g : map-fun-ctx,
    C1 : (g |- con),
    C2 : (g |- con),
    M1 : (g |- eterm),
    M2 : (g |- eterm),
    M' : (g |- eterm),
    Dmap : (g |- map C1 M1),
    Dmap1 : (g |- map C2 M2)
  | x : [g |- map (pair C1 C2) (epair M1 M2)],
    map : [g |- map (pair C1 C2) M']
  ; split map as
    case map/pair:
    { g : map-fun-ctx,
      C1 : (g |- con),
      C2 : (g |- con),
      M1 : (g |- eterm),
      M2 : (g |- eterm),
      M3 : (g |- eterm),
      M4 : (g |- eterm),
      Dmap : (g |- map C1 M1),
      Dmap1 : (g |- map C2 M2),
      Dmap2 : (g |- map C1 M3),
      Dmap3 : (g |- map C2 M4)
    | x : [g |- map (pair C1 C2) (epair M1 M2)],
      map : [g |- map (pair C1 C2) (epair M3 M4)]
    ; by map-fun [g |- Dmap] [g |- Dmap2] as Deq1 unboxed;
      by map-fun [g |- Dmap1] [g |- Dmap3] as Deq2 unboxed;
      solve
        eterm-resp-eterm2 [x : eterm, y : eterm |- epair x y] [g |- Deq1]
          [g |- Deq2]
    }
  }
  %{ FIXME: File "src/core/reconstruct.ml", line 2248, characters 11-16: Pattern matching failed
  case #.5:
  { g : map-fun-ctx,
    K437 : (g |- kind),
    A35 : (g |- etp),
    #map :
      #(g |-
          block (
            a : con,
            da : cn-of a (K437[..]),
            x : eterm,
            dx : evof x (A35[..]),
            at : map a x)),
    M' : (g |- eterm)
  | x : [g |- map #map.1 #map.3], map : [g |- map #map.1 M']
  ; split map as
    case #.5:
    { g : map-fun-ctx,
      K437 : (g |- kind),
      A35 : (g |- etp),
      #map :
        #(g |-
            block (
              a : con,
              da : cn-of a (K437[..]),
              x : eterm,
              dx : evof x (A35[..]),
              at : map a x))
    | x : [g |- map #map.1 #map.3], map : [g |- map #map.1 #map.3]
    ; solve [g |- eterm-eq/i ]
    }
  }
  case #.5:
  { g : map-fun-ctx,
    A36 : (g |- etp),
    K438 : (g |- kind),
    #map :
      #(g |-
          block (
            x : eterm,
            d : evof x (A36[..]),
            a : con,
            e : cn-of a (K438[..]),
            at : map a x)),
    M' : (g |- eterm)
  | x : [g |- map #map.3 #map.1], map : [g |- map #map.3 M']
  ; split map as
    case #.5:
    { g : map-fun-ctx,
      A36 : (g |- etp),
      K438 : (g |- kind),
      #map :
        #(g |-
            block (
              x : eterm,
              d : evof x (A36[..]),
              a : con,
              e : cn-of a (K438[..]),
              at : map a x))
    | x : [g |- map #map.3 #map.1], map : [g |- map #map.3 #map.1]
    ; solve [g |- eterm-eq/i ]
    }
  }
  case #.2:
  { g : map-fun-ctx,
    M : (g |- eterm),
    #map : #(g |- block (a : con, at : map a (M[..]))),
    M' : (g |- eterm)
  | x : [g |- map #map.1 M], map : [g |- map #map.1 M']
  ; split map as
    case #.2:
    { g : map-fun-ctx,
      M' : (g |- eterm),
      #map : #(g |- block (a : con, at : map a (M'[..])))
    | x : [g |- map #map.1 M'], map : [g |- map #map.1 M']
    ; solve [g |- eterm-eq/i ]
    }
  }
  }%
}

and proof tmap-fun :
  (g : map-fun-ctx)
  [g |- tmap K A] ->
  [g |- tmap K A'] ->
    [g |- etp-eq A A'] =
/ total 1 /
intros
{ g : map-fun-ctx, K : (g |- kind), A : (g |- etp), A' : (g |- etp)
| x : [g |- tmap K A], tmap : [g |- tmap K A']
; split x as
  case tmap/one:
  { g : map-fun-ctx, A' : (g |- etp)
  | x : [g |- tmap one eone], tmap : [g |- tmap one A']
  ; split tmap as
    case tmap/one:
    { g : map-fun-ctx
    | x : [g |- tmap one eone], tmap : [g |- tmap one eone]
    ; solve [_ |- etp-eq/i ]
    }
  }
  case tmap/sigma:
  { g : map-fun-ctx,
    K2 : (g |- kind),
    K1 : (g, a139 : con |- kind),
    A2 : (g |- etp),
    A1 : (g, y754 : eterm |- etp),
    A' : (g |- etp),
    Dtmap :
      (g, a : con, x : eterm, z753 : map a x |- tmap (K1[.., a]) (A1[.., x])),
    Dtmap1 : (g |- tmap K2 A2)
  | x : [g |- tmap (sigma K2 (\x248. K1)) (esigma A2 (\x128. A1))],
    tmap : [g |- tmap (sigma K2 (\x248. K1)) A']
  ; split tmap as
    case tmap/sigma:
    { g : map-fun-ctx,
      K2 : (g |- kind),
      K1 : (g, a139 : con |- kind),
      A2 : (g |- etp),
      A1 : (g, y754 : eterm |- etp),
      A4 : (g |- etp),
      A3 : (g, y754 : eterm |- etp),
      Dtmap :
        (g, a : con, x : eterm, z753 : map a x |-
           tmap (K1[.., a]) (A1[.., x])),
      Dtmap1 : (g |- tmap K2 A2),
      Dtmap2 :
        (g, a : con, x : eterm, z753 : map a x |-
           tmap (K1[.., a]) (A3[.., x])),
      Dtmap3 : (g |- tmap K2 A4)
    | x : [g |- tmap (sigma K2 (\x248. K1)) (esigma A2 (\x128. A1))],
      tmap : [g |- tmap (sigma K2 (\x248. K1)) (esigma A4 (\x128. A3))]
    ; split
      tmap-fun
        [_,
         b :
           block (
             x : eterm,
             d : evof x (A2[..]),
             a : con,
             e : cn-of a (K2[..]),
             at : map a x) |- Dtmap[.., b.3, b.1, b.5]]
        [_,
         b :
           block (
             x : eterm,
             d : evof x (A2[..]),
             a : con,
             e : cn-of a (K2[..]),
             at : map a x) |- Dtmap2[.., b.3, b.1, b.5]] as
      case etp-eq/i:
      { g : map-fun-ctx,
        K2 : (g |- kind),
        K1 : (g, a139 : con |- kind),
        A2 : (g |- etp),
        A5 : (g, x : eterm |- etp),
        A4 : (g |- etp),
        Dtmap :
          (g, a : con, x : eterm, z753 : map a x |-
             tmap (K1[.., a]) (A5[.., x])),
        Dtmap1 : (g |- tmap K2 A2),
        Dtmap2 :
          (g, a : con, x : eterm, z753 : map a x |-
             tmap (K1[.., a]) (A5[.., x])),
        Dtmap3 : (g |- tmap K2 A4)
      | x : [g |- tmap (sigma K2 (\x248. K1)) (esigma A2 (\x128. A5))],
        tmap : [g |- tmap (sigma K2 (\x248. K1)) (esigma A4 (\x128. A5))]
      ; split tmap-fun [_ |- Dtmap1] [_ |- Dtmap3] as
        case etp-eq/i:
        { g : map-fun-ctx,
          K2 : (g |- kind),
          K1 : (g, a139 : con |- kind),
          A4 : (g |- etp),
          A5 : (g, x : eterm |- etp),
          Dtmap :
            (g, a : con, x : eterm, z753 : map a x |-
               tmap (K1[.., a]) (A5[.., x])),
          Dtmap1 : (g |- tmap K2 A4),
          Dtmap2 :
            (g, a : con, x : eterm, z753 : map a x |-
               tmap (K1[.., a]) (A5[.., x])),
          Dtmap3 : (g |- tmap K2 A4)
        | x : [g |- tmap (sigma K2 (\x248. K1)) (esigma A4 (\x128. A5))],
          tmap : [g |- tmap (sigma K2 (\x248. K1)) (esigma A4 (\x128. A5))]
        ; solve [_ |- etp-eq/i ]
        }
      }
    }
  }
  case tmap/pi:
  { g : map-fun-ctx,
    K2 : (g |- kind),
    K1 : (g, a138 : con |- kind),
    A2 : (g |- etp),
    A1 : (g, z752 : eterm |- etp),
    A' : (g |- etp),
    Dtmap :
      (g, a : con, x : eterm, x752 : map a x |- tmap (K1[.., a]) (A1[.., x])),
    Dtmap1 : (g |- tmap K2 A2)
  | x : [g |- tmap (pi K2 (\x247. K1)) (epi A2 (\x127. A1))],
    tmap : [g |- tmap (pi K2 (\x247. K1)) A']
  ; split tmap as
    case tmap/pi:
    { g : map-fun-ctx,
      K2 : (g |- kind),
      K1 : (g, a138 : con |- kind),
      A2 : (g |- etp),
      A1 : (g, z752 : eterm |- etp),
      A4 : (g |- etp),
      A3 : (g, z752 : eterm |- etp),
      Dtmap :
        (g, a : con, x : eterm, x752 : map a x |-
           tmap (K1[.., a]) (A1[.., x])),
      Dtmap1 : (g |- tmap K2 A2),
      Dtmap2 :
        (g, a : con, x : eterm, x752 : map a x |-
           tmap (K1[.., a]) (A3[.., x])),
      Dtmap3 : (g |- tmap K2 A4)
    | x : [g |- tmap (pi K2 (\x247. K1)) (epi A2 (\x127. A1))],
      tmap : [g |- tmap (pi K2 (\x247. K1)) (epi A4 (\x127. A3))]
    ; split
      tmap-fun
        [g,
         b :
           block (
             x : eterm,
             d : evof x (A2[..]),
             a : con,
             e : cn-of a (K2[..]),
             at : map a x) |- Dtmap[.., b.3, b.1, b.5]]
        [g,
         b :
           block (
             x : eterm,
             d : evof x (A2[..]),
             a : con,
             e : cn-of a (K2[..]),
             at : map a x) |- Dtmap2[.., b.3, b.1, b.5]] as
      case etp-eq/i:
      { g : map-fun-ctx,
        K2 : (g |- kind),
        K1 : (g, a138 : con |- kind),
        A2 : (g |- etp),
        A5 : (g, x : eterm |- etp),
        A4 : (g |- etp),
        Dtmap :
          (g, a : con, x : eterm, x752 : map a x |-
             tmap (K1[.., a]) (A5[.., x])),
        Dtmap1 : (g |- tmap K2 A2),
        Dtmap2 :
          (g, a : con, x : eterm, x752 : map a x |-
             tmap (K1[.., a]) (A5[.., x])),
        Dtmap3 : (g |- tmap K2 A4)
      | x : [g |- tmap (pi K2 (\x247. K1)) (epi A2 (\x127. A5))],
        tmap : [g |- tmap (pi K2 (\x247. K1)) (epi A4 (\x127. A5))]
      ; split tmap-fun [g |- Dtmap1] [g |- Dtmap3] as
        case etp-eq/i:
        { g : map-fun-ctx,
          K2 : (g |- kind),
          K1 : (g, a138 : con |- kind),
          A4 : (g |- etp),
          A5 : (g, x : eterm |- etp),
          Dtmap :
            (g, a : con, x : eterm, x752 : map a x |-
               tmap (K1[.., a]) (A5[.., x])),
          Dtmap1 : (g |- tmap K2 A4),
          Dtmap2 :
            (g, a : con, x : eterm, x752 : map a x |-
               tmap (K1[.., a]) (A5[.., x])),
          Dtmap3 : (g |- tmap K2 A4)
        | x : [g |- tmap (pi K2 (\x247. K1)) (epi A4 (\x127. A5))],
          tmap : [g |- tmap (pi K2 (\x247. K1)) (epi A4 (\x127. A5))]
        ; solve [g |- etp-eq/i ]
        }
      }
    }
  }
  case tmap/sing:
  { g : map-fun-ctx,
    C : (g |- con),
    M : (g |- eterm),
    A' : (g |- etp),
    Dmap : (g |- map C M)
  | x : [g |- tmap (sing C) (esing M)], tmap : [g |- tmap (sing C) A']
  ; split tmap as
    case tmap/sing:
    { g : map-fun-ctx,
      C : (g |- con),
      M : (g |- eterm),
      M1 : (g |- eterm),
      Dmap : (g |- map C M),
      Dmap1 : (g |- map C M1)
    | x : [g |- tmap (sing C) (esing M)],
      tmap : [g |- tmap (sing C) (esing M1)]
    ; split map-fun [g |- Dmap] [g |- Dmap1] as
      case eterm-eq/i:
      { g : map-fun-ctx,
        C : (g |- con),
        M1 : (g |- eterm),
        Dmap : (g |- map C M1),
        Dmap1 : (g |- map C M1)
      | x : [g |- tmap (sing C) (esing M1)],
        tmap : [g |- tmap (sing C) (esing M1)]
      ; solve [g |- etp-eq/i ]
      }
    }
  }
  case tmap/t:
  { g : map-fun-ctx, A' : (g |- etp)
  | x : [g |- tmap t et], tmap : [g |- tmap t A']
  ; split tmap as
    case tmap/t:
    { g : map-fun-ctx
    | x : [g |- tmap t et], tmap : [g |- tmap t et]
    ; solve [g |- etp-eq/i ]
    }
  }
}
;

% Map Preservers Typing

schema map-bind+invert-bind-for-map-of =
  some [B : etp, K : kind, Dmap : tmap K B, Dwf : ewf B]
  block (
    x : eterm, dx : evof x B,
    a : con, da : cn-of a K,
    at : map a x
  ) +
  some [
    K : kind, K' : kind,
    B : etp,
    DmapK : tmap K B,
    DmapB : tunmap B K',
    DwfK : kd-wf K,
    DwfB : ewf B,
    DequivK : kd-equiv K K'
  ]
  block (
    a : con, da : cn-of a K,
    x : eterm, dx : evof x B,
    at : map a x, xt : unmap x a
  );

LF map-of/e : con -> kind -> eterm -> type =
| map-of/i :
  { A : etp }
  tmap K A ->
  eof M A ->
    map-of/e C K M
;

LF map-wf/e : kind -> type =
| map-wf/i :
  { A : etp }
  tmap K A ->
  ewf A ->
    map-wf/e K
;

LF map-equiv'/e : eterm -> eterm -> kind -> type =
| map-equiv'/i :
  { A : etp }
  tmap K A ->
  equiv M N A ->
    map-equiv'/e M N K
;

proof map-of :
  (g : map-bind+invert-bind-for-map-of)
  [g |- cn-of C K] ->
  [g |- map C M] ->
    [g |- map-of/e C K M] =
/ total 1 /
?

and proof map-of' :
  (g : map-bind+invert-bind-for-map-of)
  [g |- cn-of C K] ->
  [g |- map C M] ->
  [g |- tmap K A] ->
    [g |- eof M A] =
/ total /
?

and proof map-wf :
  (g : map-bind+invert-bind-for-map-of)
  [g |- kd-wf K] ->
    [g |- map-wf/e K] =
/ total 1 /
?

and proof map-wf' :
  (g : map-bind+invert-bind-for-map-of)
  [g |- kd-wf K] ->
  [g |- tmap K A] ->
    [g |- ewf A] =
/ total /
?

and proof map-subtp :
  (g : map-bind+invert-bind-for-map-of)
  [g |- kd-sub K L] ->
  [g |- tmap K A] ->
  [g |- tmap L B] ->
    [g |- subtp A B] =
/ total 1 /
?

and proof map-tequiv :
  (g : map-bind+invert-bind-for-map-of)
  [g |- kd-equiv K L] ->
  [g |- tmap K A] ->
  [g |- tmap L B] ->
    [g |- tequiv A B] =
/ total 1 /
?

and proof map-equiv' :
  (g : map-bind+invert-bind-for-map-of)
  [g |- map C M] ->
  [g |- map D N] ->
  [g |- cn-equiv C D K] ->
    [g |- map-equiv'/e M N K] =
/ total 1 /
?

and proof map-equiv'' :
  (g : map-bind+invert-bind-for-map-of)
  [g |- map C M] ->
  [g |- map D N] ->
  [g |- cn-equiv C D K] ->
  [g |- tmap K A] ->
    [g |- equiv M N A] =
/ total 1 /
?
;

schema map-bind =
  some [B : etp, K : kind, Dmap : tmap K B, Dwf : ewf B]
  block (
    x : eterm, dx : evof x B,
    a : con, da : cn-of a K,
    at : map a x
  );

LF map-equiv/e : con -> con -> kind -> type =
| map-equiv/i :
  { M : eterm } { N : eterm } { A : etp }
  map C M ->
  map D N ->
  tmap K A ->
  equiv M N A ->
    map-equiv/e C D K
;

% FIXME: C, D, K are not in scope, `invert can-map [_ |- C]`, `invert can-map [_ |- D]`.
% Note: `invert can-map [_ |- _]` yields `File "src/core/lfcheck.ml", line 957, characters 5-10: Pattern matching failed`.
% Note: `invert can-map [_, b : block (x : eterm, dx : evof x B, a : con, da : cn-of a k, at : map a x) |- b.a]` yields `File "src/core/lfcheck.ml", line 957, characters 5-10: Pattern matching failed`.
% Note: `split equiv`, (case cn-equiv/beta2) `split equiv` yields `Stack overflow`.
proof map-equiv :
  (g : map-bind)
  [g |- cn-equiv C D K] ->
    [g |- map-equiv/e C D K] =
/ total /
?
;

% Injectivity Lemmas

LF injective-prod/e : con -> con -> con -> con -> type =
| injective-prod/i :
  cn-equiv T1a T2a t ->
  cn-equiv T1b T2b t ->
    injective-prod/e T1a T1b T2a T2b
;

proof injective-prod :
  [ |- cn-equiv (prod T1a T1b) (prod T2a T2b) t] ->
    [ |- injective-prod/e T1a T1b T2a T2b] =
/ total /
?
;

LF injective-arrow/e : con -> con -> con -> con -> type =
| injective-arrow/i :
  cn-equiv T1a T2a t ->
  cn-equiv T1b T2b t ->
    injective-arrow/e T1a T1b T2a T2b
;

proof injective-arrow :
  [ |- cn-equiv (arrow T1a T1b) (arrow T2a T2b) t] ->
    [ |- injective-arrow/e T1a T1b T2a T2b] =
/ total /
?
;

LF injective-plus/e : con -> con -> con -> con -> type =
| injective-plus/i :
  cn-equiv T1a T2a t ->
  cn-equiv T1b T2b t ->
    injective-plus/e  T1a T1b T2a T2b
;

proof injective-plus :
  [ |- cn-equiv (plus T1a T1b) (plus T2a T2b) t] ->
    [ |- injective-plus/e T1a T1b T2a T2b] =
/ total /
?
;

proof injective-ref :
  [ |- cn-equiv (ref T1) (ref T2) t] ->
    [ |- cn-equiv T1 T2 t] =
/ total /
?
;

proof injective-tag :
  [ |- cn-equiv (tag T1) (tag T2) t] ->
    [ |- cn-equiv T1 T2 t] =
/ total /
?
;

LF injective-rec/e :
  kind -> (con -> con -> con) -> con ->
  kind -> (con -> con -> con) -> con -> type =
| injective-rec/i :
  kd-equiv K1 K2 ->
  ({ a : con } cn-of a (pi K1 (\l. t)) ->
   { b : con } cn-of b K1 ->
   cn-equiv (C1a a b) (C2a a b) t) ->
  cn-equiv C1b C2b K1 ->
    injective-rec/e K1 C1a C1b K2 C2a C2b
;

proof injective-rec :
  [ |- cn-equiv
        (rec' K1 (\c1. \c2. C1a) C1b)
        (rec' K2 (\c1. \c2. C2a) C2b) t] ->
    [ |- injective-rec/e K1 (\c1. \c2. C1a) C1b K2 (\c1. \c2. C2a) C2b] =
/ total /
?
;

LF injective-labeled/e : label -> con -> label -> con -> type =
| injective-labeled/i :
  label-eq L1 L2 ->
  cn-equiv T1 T2 t ->
    injective-labeled/e L1 T1 L2 T2
;

proof injective-labeled :
  [ |- cn-equiv (labeled L1 T1) (labeled L2 T2) t] ->
    [ |- injective-labeled/e L1 T1 L2 T2] =
/ total /
?
;
