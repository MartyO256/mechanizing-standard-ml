% Monotonicity

LF extends : sttp -> sttp -> type =
| extends/nil : extends F F
| extends/cons : extends F1 F2 -> extends F1 (st/cons F2 _ _)
;

proof monotonicity-lookup :
  [ |- st-lookup F L ET] ->
  [ |- extends F F'] ->
    [ |- st-lookup F' L ET] =
/ total 2 /
?
;

% Locations

proof loc-lt-antisymm : [ |- loc-lt L L] -> [ |- false] =
/ total /
?
;

proof loc-lt-trans :
  [ |- loc-lt L1 L2] ->
  [ |- loc-lt L2 L3] ->
    [ |- loc-lt L1 L3] =
/ total /
?
;

proof loc-succ-lt : [ |- loc-succ L L'] -> [ |- loc-lt L L'] =
/ total /
?
;

% Stores

proof store-bounds-increase :
  [ |- store-bounds ST L] ->
  [ |- loc-lt L L'] ->
    [ |- store-bounds ST L'] =
/ total 1 /
?
;

proof store-bounds-update :
  [ |- store-bounds ST L] ->
  [ |- store-update ST X EN ST'] ->
    [ |- store-bounds ST' L] =
/ total /
?
;

proof store-bounds-update :
  [ |- store-bounds ST L] ->
  [ |- store-update ST X EN ST'] ->
    [ |- store-bounds ST' L] =
/ total /
?
;

proof store-lookup-bound :
  [ |- store-of F ST F1] ->
  [ |- store-lookup ST L EN] ->
  [ |- store-bounds ST L] ->
    [ |- false] =
/ total 1 /
?
;

proof store-update-bound :
  [ |- store-of F ST F'] ->
  [ |- store-update ST L EN ST'] ->
  [ |- store-bounds ST L] ->
    [ |- false] =
/ total 1 /
?
;

proof sttp-lookup-bound :
  [ |- store-of F' ST F] ->
  [ |- st-lookup F L ET] ->
  [ |- store-bounds ST L] ->
    [ |- false] =
/ total 1 /
?
;

proof store-lookup-bound :
  [ |- store-of F ST F'] ->
  [ |- store-lookup ST L EN] ->
  [ |- store-bounds ST L] ->
    [ |- false] =
/ total 1 /
?
;

proof preservation-lookup :
  [ |- store-of F1 ST F2] ->
  [ |- st-lookup F2 L ET] ->
  [ |- store-lookup ST L EN] ->
    [ |- entry-of F1 EN ET] =
/ total 1 /
?
;

proof preservation-update :
  [ |- store-of F1 ST F2] ->
  [ |- st-lookup F2 L ET] ->
  [ |- store-update ST L EN ST'] ->
  [ |- entry-of F1 EN ET] ->
    [ |- store-of F1 ST' F2] =
/ total 1 /
?
;

proof st-lookup-fun :
  [ |- store-of F' ST F] ->
  [ |- st-lookup F L ET] ->
  [ |- st-lookup F L ET'] ->
    [ |- entp-eq ET ET'] =
/ total 1 /
?
;

proof nextloc-bounds : [ |- nextloc ST L] -> [ |- store-bounds ST L] =
/ total /
?
;

% Preservation

LF preservation-tm/tm-of/existsF' : term -> con -> type =
| preservation-tm/tm-of/existsF'/i :
  { F' : sttp } tm-of F' E' T ->
    preservation-tm/tm-of/existsF' E' T
;

proof preservation-tm/tm-of :
  [ |- tm-of F E T] ->
  [ |- store-of F ST F] ->
  [ |- step ST E ST' E'] ->
    [ |- preservation-tm/tm-of/existsF' E' T] =
/ total 1 /
?
;

LF preservation-tm/store-of/existsF' : store -> type =
| preservation-tm/store-of/existsF'/i :
  { F' : sttp } store-of F' ST' F' ->
    preservation-tm/store-of/existsF' ST'
;

proof preservation-tm/store-of :
  [ |- tm-of F E T] ->
  [ |- store-of F ST F] ->
  [ |- step ST E ST' E'] ->
    [ |- preservation-tm/store-of/existsF' ST'] =
/ total 1 /
?
;

LF preservation-tm/extends/existsF' : sttp -> type =
| preservation-tm/extends/existsF'/i :
  { F' : sttp } extends F F' ->
    preservation-tm/extends/existsF' F
;

proof preservation-tm/extends :
  [ |- tm-of F E T] ->
  [ |- store-of F ST F] ->
  [ |- step ST E ST' E'] ->
    [ |- preservation-tm/extends/existsF' F] =
/ total 1 /
?
;
