% Term Inversion

proof inversion-tm/abort/tm-of : [ |- tm-of F (tm/abort E T) T'] ->
                                   [ |- tm-of F E void] =
/ total 1 /
intros
{ F : ( |- sttp), E : ( |- term), T : ( |- con), T' : ( |- con)
| x : [ |- tm-of F (tm/abort E T) T']
; split x as
  case tm-of/equiv:
  { F : ( |- sttp),
    E : ( |- term),
    T : ( |- con),
    T' : ( |- con),
    C : ( |- con),
    X1 : ( |- cn-equiv C T' t),
    X2 : ( |- tm-of F (tm/abort E T) C)
  | x : [ |- tm-of F (tm/abort E T) T']
  ; solve inversion-tm/abort/tm-of [ |- X2]
  }
  case tm-of/abort:
  { F : ( |- sttp),
    E : ( |- term),
    T' : ( |- con),
    X1 : ( |- cn-of T' t),
    X2 : ( |- tm-of F E void)
  | x : [ |- tm-of F (tm/abort E T') T']
  ; solve [ |- X2]
  }
  case tm-of/var:
  { F : ( |- sttp),
    E : ( |- term),
    T : ( |- con),
    T' : ( |- con),
    X1 : ( |- tm-assm (tm/abort E T) T')
  | x : [ |- tm-of F (tm/abort E T) T']
  ; impossible [ |- X1]
  }
}
;

proof inversion-tm/abort/cn-equiv : [ |- tm-of F (tm/abort E T) T'] ->
                                      [ |- cn-equiv T T' t] =
/ total 1 /
intros
{ F : ( |- sttp), E : ( |- term), T : ( |- con), T' : ( |- con)
| x : [ |- tm-of F (tm/abort E T) T']
; split x as
  case tm-of/equiv:
  { F : ( |- sttp),
    E : ( |- term),
    T : ( |- con),
    T' : ( |- con),
    C : ( |- con),
    X1 : ( |- cn-equiv C T' t),
    X2 : ( |- tm-of F (tm/abort E T) C)
  | x : [ |- tm-of F (tm/abort E T) T']
  ; by inversion-tm/abort/cn-equiv [ |- X2] as L unboxed;
    solve [ |- cn-equiv/trans L X1]
  }
  case tm-of/abort:
  { F : ( |- sttp),
    E : ( |- term),
    T' : ( |- con),
    X1 : ( |- cn-of T' t),
    X2 : ( |- tm-of F E void)
  | x : [ |- tm-of F (tm/abort E T') T']
  ; solve [ |- cn-equiv/refl X1]
  }
  case tm-of/var:
  { F : ( |- sttp),
    E : ( |- term),
    T : ( |- con),
    T' : ( |- con),
    X1 : ( |- tm-assm (tm/abort E T) T')
  | x : [ |- tm-of F (tm/abort E T) T']
  ; impossible [ |- X1]
  }
}
;

LF inversion-tm/refloc/cn-equiv/existsT' : con -> type =
| inversion-tm/refloc/cn-equiv/existsT'/i :
  { T' : con } cn-equiv (ref T') T t ->
    inversion-tm/refloc/cn-equiv/existsT' T
;

proof inversion-tm/refloc/cn-equiv/existsT'/i :
  { T' : [ |- con] } [ |- cn-equiv (ref T') T t] ->
    [ |- inversion-tm/refloc/cn-equiv/existsT' T] =
/ total /
intros
{ T : ( |- con), T' : ( |- con)
| x : [ |- cn-equiv (ref T') T t]
; by x as X unboxed;
  solve [ |- inversion-tm/refloc/cn-equiv/existsT'/i T' X]
}
;

proof inversion-tm/refloc/cn-equiv :
  [ |- tm-of F (tm/refloc L) T] ->
    [ |- inversion-tm/refloc/cn-equiv/existsT' T] =
/ total 1 /
intros
{ F : ( |- sttp), L : ( |- location), T : ( |- con)
| x : [ |- tm-of F (tm/refloc L) T]
; split x as
  case tm-of/equiv:
  { F : ( |- sttp),
    L : ( |- location),
    T : ( |- con),
    C : ( |- con),
    X : ( |- cn-equiv C T t),
    X1 : ( |- tm-of F (tm/refloc L) C)
  | x : [ |- tm-of F (tm/refloc L) T]
  ; by inversion-tm/refloc/cn-equiv [ |- X1] as q;
    split q as
    case inversion-tm/refloc/cn-equiv/existsT'/i:
    { F : ( |- sttp),
      L : ( |- location),
      T : ( |- con),
      C : ( |- con),
      X : ( |- cn-equiv C T t),
      X1 : ( |- tm-of F (tm/refloc L) C),
      C2 : ( |- con),
      X2 : ( |- cn-equiv (ref C2) C t)
    | x : [ |- tm-of F (tm/refloc L) T],
      q : [ |- inversion-tm/refloc/cn-equiv/existsT' C]
    ; suffices by inversion-tm/refloc/cn-equiv/existsT'/i [ |- C2] toshow
      [ |- cn-equiv (ref C2) T t] {
        solve [ |- cn-equiv/trans X2 X]
      }
    }
  }
  case tm-of/refloc:
  { F : ( |- sttp),
    L : ( |- location),
    C : ( |- con),
    X1 : ( |- cn-of C t),
    X2 : ( |- st-lookup F L (et/ref C))
  | x : [ |- tm-of F (tm/refloc L) (ref C)]
  ; suffices by inversion-tm/refloc/cn-equiv/existsT'/i [ |- C] toshow
    [ |- cn-equiv (ref C) (ref C) t] {
      solve [ |- cn-equiv/refl (cn-of/ref X1)]
    }
  }
  case tm-of/var:
  { F : ( |- sttp),
    L : ( |- location),
    T : ( |- con),
    X : ( |- tm-assm (tm/refloc L) T)
  | x : [ |- tm-of F (tm/refloc L) T]
  ; impossible [ |- X]
  }
}
;

LF inversion-tm/refloc/st-lookup/existsT' : sttp -> location -> type =
| inversion-tm/refloc/st-lookup/existsT'/i :
  { T' : con } st-lookup F L (et/ref T') ->
    inversion-tm/refloc/st-lookup/existsT' F L
;

proof inversion-tm/refloc/st-lookup :
  [ |- tm-of F (tm/refloc L) T] ->
    [ |- inversion-tm/refloc/st-lookup/existsT' F L] =
/ total 1 /
intros
{ F : ( |- sttp), L : ( |- location), T : ( |- con)
| x : [ |- tm-of F (tm/refloc L) T]
; split x as
  case tm-of/equiv:
  { F : ( |- sttp),
    L : ( |- location),
    T : ( |- con),
    C : ( |- con),
    X : ( |- cn-equiv C T t),
    X1 : ( |- tm-of F (tm/refloc L) C)
  | x : [ |- tm-of F (tm/refloc L) T]
  ; by inversion-tm/refloc/st-lookup [ |- X1] as q;
    solve q
  }
  case tm-of/refloc:
  { F : ( |- sttp),
    L : ( |- location),
    C : ( |- con),
    X1 : ( |- cn-of C t),
    X2 : ( |- st-lookup F L (et/ref C))
  | x : [ |- tm-of F (tm/refloc L) (ref C)]
  ; solve [ |- inversion-tm/refloc/st-lookup/existsT'/i C X2]
  }
  case tm-of/var:
  { F : ( |- sttp),
    L : ( |- location),
    T : ( |- con),
    X : ( |- tm-assm (tm/refloc L) T)
  | x : [ |- tm-of F (tm/refloc L) T]
  ; impossible [ |- X]
  }
}
;

LF inversion-tm/refloc/cn-of/existsT' : type =
| inversion-tm/refloc/cn-of/existsT'/i : { T' : con } cn-of T' t ->
                                           inversion-tm/refloc/cn-of/existsT'
;

proof inversion-tm/refloc/cn-of :
  [ |- tm-of F (tm/refloc L) T] ->
    [ |- inversion-tm/refloc/cn-of/existsT'] =
/ total 1 /
intros
{ F : ( |- sttp), L : ( |- location), T : ( |- con)
| x : [ |- tm-of F (tm/refloc L) T]
; split x as
  case tm-of/equiv:
  { F : ( |- sttp),
    L : ( |- location),
    T : ( |- con),
    C : ( |- con),
    X : ( |- cn-equiv C T t),
    X1 : ( |- tm-of F (tm/refloc L) C)
  | x : [ |- tm-of F (tm/refloc L) T]
  ; by inversion-tm/refloc/cn-of [ |- X1] as q;
    solve q
  }
  case tm-of/refloc:
  { F : ( |- sttp),
    L : ( |- location),
    C : ( |- con),
    X1 : ( |- cn-of C t),
    X2 : ( |- st-lookup F L (et/ref C))
  | x : [ |- tm-of F (tm/refloc L) (ref C)]
  ; solve [ |- inversion-tm/refloc/cn-of/existsT'/i C X1]
  }
  case tm-of/var:
  { F : ( |- sttp),
    L : ( |- location),
    T : ( |- con),
    X : ( |- tm-assm (tm/refloc L) T)
  | x : [ |- tm-of F (tm/refloc L) T]
  ; impossible [ |- X]
  }
}
;

proof inversion-tm/deref : [ |- tm-of F (tm/deref E) T] ->
                             [ |- tm-of F E (ref T)] =
/ total 1 /
intros
{ F : ( |- sttp), E : ( |- term), T : ( |- con)
| x : [ |- tm-of F (tm/deref E) T]
; split x as
  case tm-of/equiv:
  { F : ( |- sttp),
    E : ( |- term),
    T : ( |- con),
    C : ( |- con),
    X : ( |- cn-equiv C T t),
    X1 : ( |- tm-of F (tm/deref E) C)
  | x : [ |- tm-of F (tm/deref E) T]
  ; by inversion-tm/deref [ |- X1] as Q1 unboxed;
    by [ |- cn-equiv/ref X] as Q2 unboxed;
    solve [ |- tm-of/equiv Q2 Q1]
  }
  case tm-of/deref:
  { F : ( |- sttp),
    E : ( |- term),
    T : ( |- con),
    X : ( |- tm-of F E (ref T))
  | x : [ |- tm-of F (tm/deref E) T]
  ; solve [ |- X]
  }
  case tm-of/var:
  { F : ( |- sttp),
    E : ( |- term),
    T : ( |- con),
    X : ( |- tm-assm (tm/deref E) T)
  | x : [ |- tm-of F (tm/deref E) T]
  ; impossible [ |- X]
  }
}
;

LF inversion-tm/tagloc/cn-equiv/existsT' : con -> type =
| inversion-tm/tagloc/cn-equiv/existsT'/i :
  { T' : con} cn-equiv (tag T') T t ->
    inversion-tm/tagloc/cn-equiv/existsT' T
;

proof inversion-tm/tagloc/cn-equiv/existsT'/i :
  { T' : [ |- con] } [ |- cn-equiv (tag T') T t] ->
    [ |- inversion-tm/tagloc/cn-equiv/existsT' T] =
/ total /
intros
{ T : ( |- con), T' : ( |- con)
| x : [ |- cn-equiv (tag T') T t]
; by x as X unboxed;
  solve [ |- inversion-tm/tagloc/cn-equiv/existsT'/i T' X]
}
;

proof inversion-tm/tagloc/cn-equiv :
  [ |- tm-of F (tm/tagloc L) T] ->
    [ |- inversion-tm/tagloc/cn-equiv/existsT' T] =
/ total 1 /
intros
{ F : ( |- sttp), L : ( |- location), T : ( |- con)
| x : [ |- tm-of F (tm/tagloc L) T]
; split x as
  case tm-of/equiv:
  { F : ( |- sttp),
    L : ( |- location),
    T : ( |- con),
    C : ( |- con),
    X : ( |- cn-equiv C T t),
    X1 : ( |- tm-of F (tm/tagloc L) C)
  | x : [ |- tm-of F (tm/tagloc L) T]
  ; by inversion-tm/tagloc/cn-equiv [ |- X1] as q;
    split q as
    case inversion-tm/tagloc/cn-equiv/existsT'/i:
    { F : ( |- sttp),
      L : ( |- location),
      T : ( |- con),
      C : ( |- con),
      X : ( |- cn-equiv C T t),
      X1 : ( |- tm-of F (tm/tagloc L) C),
      C2 : ( |- con),
      X2 : ( |- cn-equiv (tag C2) C t)
    | x : [ |- tm-of F (tm/tagloc L) T],
      q : [ |- inversion-tm/tagloc/cn-equiv/existsT' C]
    ; suffices by inversion-tm/tagloc/cn-equiv/existsT'/i [ |- C2] toshow
      [ |- cn-equiv (tag C2) T t] {
        solve [ |- cn-equiv/trans X2 X]
      }
    }
  }
  case tm-of/tagloc:
  { F : ( |- sttp),
    L : ( |- location),
    C : ( |- con),
    X1 : ( |- cn-of C t),
    X2 : ( |- st-lookup F L (et/tag C))
  | x : [ |- tm-of F (tm/tagloc L) (tag C)]
  ; suffices by inversion-tm/tagloc/cn-equiv/existsT'/i [ |- C] toshow
    [ |- cn-equiv (tag C) (tag C) t] {
      solve [ |- cn-equiv/refl (cn-of/tag X1)]
    }
  }
  case tm-of/var:
  { F : ( |- sttp),
    L : ( |- location),
    T : ( |- con),
    X : ( |- tm-assm (tm/tagloc L) T)
  | x : [ |- tm-of F (tm/tagloc L) T]
  ; impossible [ |- X]
  }
}
;

LF inversion-tm/tagloc/st-lookup/existsT' : sttp -> location -> type =
| inversion-tm/tagloc/st-lookup/existsT'/i :
  { T' : con } st-lookup F L (et/tag T') ->
    inversion-tm/tagloc/st-lookup/existsT' F L
;

proof inversion-tm/tagloc/st-lookup :
  [ |- tm-of F (tm/tagloc L) T] ->
    [ |- inversion-tm/tagloc/st-lookup/existsT' F L] =
/ total 1 /
intros
{ F : ( |- sttp), L : ( |- location), T : ( |- con)
| x : [ |- tm-of F (tm/tagloc L) T]
; split x as
  case tm-of/equiv:
  { F : ( |- sttp),
    L : ( |- location),
    T : ( |- con),
    C : ( |- con),
    X : ( |- cn-equiv C T t),
    X1 : ( |- tm-of F (tm/tagloc L) C)
  | x : [ |- tm-of F (tm/tagloc L) T]
  ; by inversion-tm/tagloc/st-lookup [ |- X1] as q;
    solve q
  }
  case tm-of/tagloc:
  { F : ( |- sttp),
    L : ( |- location),
    C : ( |- con),
    X1 : ( |- cn-of C t),
    X2 : ( |- st-lookup F L (et/tag C))
  | x : [ |- tm-of F (tm/tagloc L) (tag C)]
  ; solve [ |- inversion-tm/tagloc/st-lookup/existsT'/i C X2]
  }
  case tm-of/var:
  { F : ( |- sttp),
    L : ( |- location),
    T : ( |- con),
    X : ( |- tm-assm (tm/tagloc L) T)
  | x : [ |- tm-of F (tm/tagloc L) T]
  ; impossible [ |- X]
  }
}
;

LF inversion-tm/tagloc/cn-of/existsT' : type =
| inversion-tm/tagloc/cn-of/existsT'/i : { T' : con } cn-of T' t ->
                                           inversion-tm/tagloc/cn-of/existsT'
;

proof inversion-tm/tagloc/cn-of :
  [ |- tm-of F (tm/tagloc L) T] ->
    [ |- inversion-tm/tagloc/cn-of/existsT'] =
/ total 1 /
intros
{ F : ( |- sttp), L : ( |- location), T : ( |- con)
| x : [ |- tm-of F (tm/tagloc L) T]
; split x as
  case tm-of/equiv:
  { F : ( |- sttp),
    L : ( |- location),
    T : ( |- con),
    C : ( |- con),
    X : ( |- cn-equiv C T t),
    X1 : ( |- tm-of F (tm/tagloc L) C)
  | x : [ |- tm-of F (tm/tagloc L) T]
  ; by inversion-tm/tagloc/cn-of [ |- X1] as q;
    solve q
  }
  case tm-of/tagloc:
  { F : ( |- sttp),
    L : ( |- location),
    C : ( |- con),
    X1 : ( |- cn-of C t),
    X2 : ( |- st-lookup F L (et/tag C))
  | x : [ |- tm-of F (tm/tagloc L) (tag C)]
  ; solve [ |- inversion-tm/tagloc/cn-of/existsT'/i C X1]
  }
  case tm-of/var:
  { F : ( |- sttp),
    L : ( |- location),
    T : ( |- con),
    X : ( |- tm-assm (tm/tagloc L) T)
  | x : [ |- tm-of F (tm/tagloc L) T]
  ; impossible [ |- X]
  }
}
;

proof inversion-tm/newtag : [ |- tm-of F (tm/newtag T') T] ->
                              [ |- cn-equiv (tag T') T t] =
/ total 1 /
intros
{ F : ( |- sttp), T' : ( |- con), T : ( |- con)
| x : [ |- tm-of F (tm/newtag T') T]
; split x as
  case tm-of/equiv:
  { F : ( |- sttp),
    T' : ( |- con),
    T : ( |- con),
    C : ( |- con),
    X : ( |- cn-equiv C T t),
    X1 : ( |- tm-of F (tm/newtag T') C)
  | x : [ |- tm-of F (tm/newtag T') T]
  ; by inversion-tm/newtag [ |- X1] as Q unboxed;
    solve [ |- cn-equiv/trans Q X]
  }
  case tm-of/newtag:
  { F : ( |- sttp), T' : ( |- con), X : ( |- cn-of T' t)
  | x : [ |- tm-of F (tm/newtag T') (tag T')]
  ; solve [ |- cn-equiv/refl (cn-of/tag X)]
  }
  case tm-of/var:
  { F : ( |- sttp),
    T' : ( |- con),
    T : ( |- con),
    X : ( |- tm-assm (tm/newtag T') T)
  | x : [ |- tm-of F (tm/newtag T') T]
  ; impossible [ |- X]
  }
}
;

proof inversion-tm/tag/cn-equiv : [ |- tm-of F (tm/tag E1 E2) T] ->
                                    [ |- cn-equiv tagged T t] =
/ total 1 /
intros
{ F : ( |- sttp), E : ( |- term), E1 : ( |- term), T : ( |- con)
| x : [ |- tm-of F (tm/tag E E1) T]
; split x as
  case tm-of/equiv:
  { F : ( |- sttp),
    E : ( |- term),
    E1 : ( |- term),
    T : ( |- con),
    C : ( |- con),
    X : ( |- cn-equiv C T t),
    X1 : ( |- tm-of F (tm/tag E E1) C)
  | x : [ |- tm-of F (tm/tag E E1) T]
  ; by inversion-tm/tag/cn-equiv [ |- X1] as Q unboxed;
    solve [ |- cn-equiv/trans Q X]
  }
  case tm-of/tag:
  { F : ( |- sttp),
    E : ( |- term),
    E1 : ( |- term),
    C : ( |- con),
    X : ( |- tm-of F E1 C),
    X1 : ( |- tm-of F E (tag C))
  | x : [ |- tm-of F (tm/tag E E1) tagged]
  ; solve [ |- cn-equiv/refl cn-of/tagged]
  }
  case tm-of/var:
  { F : ( |- sttp),
    E : ( |- term),
    E1 : ( |- term),
    T : ( |- con),
    X : ( |- tm-assm (tm/tag E E1) T)
  | x : [ |- tm-of F (tm/tag E E1) T]
  ; impossible [ |- X]
  }
}
;

LF inversion-tm/tag/tm-of1/existsT' : sttp -> term -> type =
| inversion-tm/tag/tm-of1/existsT'/i :
  { T' : con } tm-of F E1 (tag T') ->
    inversion-tm/tag/tm-of1/existsT' F E1
;

proof inversion-tm/tag/tm-of1 :
  [ |- tm-of F (tm/tag E1 E2) T] ->
    [ |- inversion-tm/tag/tm-of1/existsT' F E1] =
/ total 1 /
intros
{ F : ( |- sttp), E : ( |- term), E1 : ( |- term), T : ( |- con)
| x : [ |- tm-of F (tm/tag E E1) T]
; split x as
  case tm-of/equiv:
  { F : ( |- sttp),
    E : ( |- term),
    E1 : ( |- term),
    T : ( |- con),
    C : ( |- con),
    X : ( |- cn-equiv C T t),
    X1 : ( |- tm-of F (tm/tag E E1) C)
  | x : [ |- tm-of F (tm/tag E E1) T]
  ; by inversion-tm/tag/tm-of1 [ |- X1] as q;
    solve q
  }
  case tm-of/tag:
  { F : ( |- sttp),
    E : ( |- term),
    E1 : ( |- term),
    C : ( |- con),
    X : ( |- tm-of F E1 C),
    X1 : ( |- tm-of F E (tag C))
  | x : [ |- tm-of F (tm/tag E E1) tagged]
  ; solve [ |- inversion-tm/tag/tm-of1/existsT'/i C X1]
  }
  case tm-of/var:
  { F : ( |- sttp),
    E : ( |- term),
    E1 : ( |- term),
    T : ( |- con),
    X : ( |- tm-assm (tm/tag E E1) T)
  | x : [ |- tm-of F (tm/tag E E1) T]
  ; impossible [ |- X]
  }
}
;

LF inversion-tm/tag/tm-of2/existsT' : sttp -> term -> type =
| inversion-tm/tag/tm-of2/existsT'/i :
  { T' : con } tm-of F E2 T' ->
    inversion-tm/tag/tm-of2/existsT' F E2
;

proof inversion-tm/tag/tm-of2 :
  [ |- tm-of F (tm/tag E1 E2) T] ->
    [ |- inversion-tm/tag/tm-of2/existsT' F E2] =
/ total 1 /
intros
{ F : ( |- sttp), E : ( |- term), E1 : ( |- term), T : ( |- con)
| x : [ |- tm-of F (tm/tag E E1) T]
; split x as
  case tm-of/equiv:
  { F : ( |- sttp),
    E : ( |- term),
    E1 : ( |- term),
    T : ( |- con),
    C : ( |- con),
    X : ( |- cn-equiv C T t),
    X1 : ( |- tm-of F (tm/tag E E1) C)
  | x : [ |- tm-of F (tm/tag E E1) T]
  ; by inversion-tm/tag/tm-of2 [ |- X1] as q;
    solve q
  }
  case tm-of/tag:
  { F : ( |- sttp),
    E : ( |- term),
    E1 : ( |- term),
    C : ( |- con),
    X : ( |- tm-of F E1 C),
    X1 : ( |- tm-of F E (tag C))
  | x : [ |- tm-of F (tm/tag E E1) tagged]
  ; solve [ |- inversion-tm/tag/tm-of2/existsT'/i C X]
  }
  case tm-of/var:
  { F : ( |- sttp),
    E : ( |- term),
    E1 : ( |- term),
    T : ( |- con),
    X : ( |- tm-assm (tm/tag E E1) T)
  | x : [ |- tm-of F (tm/tag E E1) T]
  ; impossible [ |- X]
  }
}
;

LF inversion-tm/out/existsL : sttp -> term -> con -> type =
| inversion-tm/out/existsL/i : { L : label } tm-of F E (labeled L T) ->
                                 inversion-tm/out/existsL F E T
;

proof inversion-tm/out : [ |- tm-of F (tm/out E) T] ->
                           [ |- inversion-tm/out/existsL F E T] =
/ total 1 /
intros
{ F : ( |- sttp), E : ( |- term), T : ( |- con)
| x : [ |- tm-of F (tm/out E) T]
; split x as
  case tm-of/equiv:
  { F : ( |- sttp),
    E : ( |- term),
    T : ( |- con),
    C : ( |- con),
    X : ( |- cn-equiv C T t),
    X1 : ( |- tm-of F (tm/out E) C)
  | x : [ |- tm-of F (tm/out E) T]
  ; by inversion-tm/out [ |- X1] as q;
    split q as
    case inversion-tm/out/existsL/i:
    { F : ( |- sttp),
      E : ( |- term),
      T : ( |- con),
      C : ( |- con),
      X : ( |- cn-equiv C T t),
      X1 : ( |- tm-of F (tm/out E) C),
      X2 : ( |- label),
      X3 : ( |- tm-of F E (labeled X2 C))
    | x : [ |- tm-of F (tm/out E) T],
      q : [ |- inversion-tm/out/existsL F E C]
    ; by [ |- cn-equiv/labeled X] as Q unboxed;
      by [ |- tm-of/equiv Q X3] as Q1 unboxed;
      solve [ |- inversion-tm/out/existsL/i X2 Q1]
    }
  }
  case tm-of/out:
  { F : ( |- sttp),
    E : ( |- term),
    T : ( |- con),
    X : ( |- label),
    X1 : ( |- tm-of F E (labeled X T))
  | x : [ |- tm-of F (tm/out E) T]
  ; solve [ |- inversion-tm/out/existsL/i X X1]
  }
  case tm-of/var:
  { F : ( |- sttp),
    E : ( |- term),
    T : ( |- con),
    X : ( |- tm-assm (tm/out E) T)
  | x : [ |- tm-of F (tm/out E) T]
  ; impossible [ |- X]
  }
}
;

proof inversion-tm/raise/cn-equiv : [ |- tm-of F (tm/raise E T') T] ->
                                      [ |- cn-equiv T' T t] =
/ total 1 /
intros
{ F : ( |- sttp), E : ( |- term), T' : ( |- con), T : ( |- con)
| x : [ |- tm-of F (tm/raise E T') T]
; split x as
  case tm-of/equiv:
  { F : ( |- sttp),
    E : ( |- term),
    T' : ( |- con),
    T : ( |- con),
    C : ( |- con),
    X : ( |- cn-equiv C T t),
    X1 : ( |- tm-of F (tm/raise E T') C)
  | x : [ |- tm-of F (tm/raise E T') T]
  ; by inversion-tm/raise/cn-equiv [ |- X1] as Q unboxed;
    solve [ |- cn-equiv/trans Q X]
  }
  case tm-of/raise:
  { F : ( |- sttp),
    E : ( |- term),
    T : ( |- con),
    X : ( |- cn-of T t),
    X1 : ( |- tm-of F E tagged)
  | x : [ |- tm-of F (tm/raise E T) T]
  ; solve [ |- cn-equiv/refl X]
  }
  case tm-of/var:
  { F : ( |- sttp),
    E : ( |- term),
    T' : ( |- con),
    T : ( |- con),
    X : ( |- tm-assm (tm/raise E T') T)
  | x : [ |- tm-of F (tm/raise E T') T]
  ; impossible [ |- X]
  }
}

and proof inversion-tm/raise/tm-of : [ |- tm-of F (tm/raise E T') T] ->
                                   [ |- tm-of F E tagged] =
/ total 1 /
intros
{ F : ( |- sttp), E : ( |- term), T' : ( |- con), T : ( |- con)
| x : [ |- tm-of F (tm/raise E T') T]
; split x as
  case tm-of/equiv:
  { F : ( |- sttp),
    E : ( |- term),
    T' : ( |- con),
    T : ( |- con),
    C : ( |- con),
    X : ( |- cn-equiv C T t),
    X1 : ( |- tm-of F (tm/raise E T') C)
  | x : [ |- tm-of F (tm/raise E T') T]
  ; solve inversion-tm/raise/tm-of [ |- X1]
  }
  case tm-of/raise:
  { F : ( |- sttp),
    E : ( |- term),
    T : ( |- con),
    X : ( |- cn-of T t),
    X1 : ( |- tm-of F E tagged)
  | x : [ |- tm-of F (tm/raise E T) T]
  ; solve [ |- X1]
  }
  case tm-of/var:
  { F : ( |- sttp),
    E : ( |- term),
    T' : ( |- con),
    T : ( |- con),
    X : ( |- tm-assm (tm/raise E T') T)
  | x : [ |- tm-of F (tm/raise E T') T]
  ; impossible [ |- X]
  }
}
;

proof inversion-tm/snd : [ |- tm-of F (tm/snd M) T] ->
                           [ |- md-of impure F M (sg/datom T)] =
/ total 1 /
intros
{ F : ( |- sttp), M : ( |- module'), T : ( |- con)
| x : [ |- tm-of F (tm/snd M) T]
; split x as
  case tm-of/equiv:
  { F : ( |- sttp),
    M : ( |- module'),
    T : ( |- con),
    C : ( |- con),
    X : ( |- cn-equiv C T t),
    X1 : ( |- tm-of F (tm/snd M) C)
  | x : [ |- tm-of F (tm/snd M) T]
  ; by [ |- sg-equiv/datom X] as Q1 unboxed;
    by inversion-tm/snd [ |- X1] as Q2 unboxed;
    by md-of/equiv [ |- Q1] [ |- Q2] as q;
    solve q
  }
  case tm-of/snd:
  { F : ( |- sttp),
    M : ( |- module'),
    T : ( |- con),
    P : ( |- purity),
    X : ( |- md-of P F M (sg/datom T))
  | x : [ |- tm-of F (tm/snd M) T]
  ; solve md-of-forget [ |- X]
  }
  case tm-of/var:
  { F : ( |- sttp),
    M : ( |- module'),
    T : ( |- con),
    X : ( |- tm-assm (tm/snd M) T)
  | x : [ |- tm-of F (tm/snd M) T]
  ; impossible [ |- X]
  }
}
;
